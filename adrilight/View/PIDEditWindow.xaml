<hc:Window x:Class="adrilight.View.PIDEditWindow"
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
           xmlns:hc="https://handyorg.github.io/handycontrol"
           xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
           xmlns:converters="clr-namespace:adrilight.Converter"
           mc:Ignorable="d"
           xmlns:richCanvas="clr-namespace:RichCanvas;assembly=RichCanvas"
           xmlns:local="clr-namespace:adrilight.View"
           Background="{StaticResource MainContentBackgroundBrush}"
           d:DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}"
           DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}" 
           Closing="PIDEditWindowClosed"
           Title="Edit LEDs PID" 
           Height="540" 
           Width="1000" 
           WindowStartupLocation="CenterOwner" 
           >

    <Window.Resources>
        <ResourceDictionary>
            <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
            <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
            <BooleanToVisibilityConverter x:Key="boolToVisibilityConvert" />
            <!--<Style x:Key="_ListBoxItemStyle" TargetType="ListBoxItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                            <Border CornerRadius="4" Name="_Border"
                                Padding="0"
                                Margin="0"
                                Background="Transparent"   
                                BorderBrush="Transparent"
                                BorderThickness="3"
                                SnapsToDevicePixels="true">
                                <ContentPresenter />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="true">

                                    <Setter TargetName="_Border" Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                --><!--<Setter Property="ToolTip" Value="{Binding DocName}"/>--><!--
                <Setter Property="Tag" Value="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType=ListBox}}" />
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu Style="{StaticResource ContextMenuBaseStyle}">
                            <MenuItem Style="{StaticResource MenuItemBaseStyle}" Header="Edit"
                                          Command="{Binding PlacementTarget.Tag.EditSelectedPaletteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                          >
                            </MenuItem>
                            <MenuItem Style="{StaticResource MenuItemBaseStyle}" Header="Share"
                                          Command="{Binding PlacementTarget.Tag.ExportCurrentSelectedPaletteToFileCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                          >
                            </MenuItem>
                            <MenuItem Style="{StaticResource MenuItemBaseStyle}" Header="Delete"
                                          Command="{Binding PlacementTarget.Tag.DeleteSelectedPaletteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                          >
                            </MenuItem>
                        </ContextMenu>

                    </Setter.Value>
                </Setter>
            </Style>-->
        </ResourceDictionary>
    </Window.Resources>

    <Grid ClipToBounds="true">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <hc:StepBar x:Name="WizardStep" StepIndex="{Binding CurrentLEDEditWizardState, Mode=TwoWay}" Margin="0,0,0,32" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" Dock="Top">
            <hc:StepBarItem Content="Create LEDs Map"/>
            <hc:StepBarItem Content="Assign the LED Order"/>
            <hc:StepBarItem Content="Finishing"/>
        </hc:StepBar>
        <Grid Grid.Column="1" Grid.Row=" 2">
            <StackPanel Orientation="Horizontal" Margin="10" HorizontalAlignment="right">
                <Button Command="{Binding BackToPreviousWizardStateCommand}" CommandParameter="back" Content="Back" >
                    <Button.Style>
                        <Style BasedOn="{StaticResource ButtonPrimary}" TargetType="Button">
                            <Setter Property="Visibility" Value="Visible"></Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="0">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button Click="Canceled" Command="{Binding CancelEditWizardCommand}" CommandParameter="cancel"  Margin="10"  Content="Cancel" Background="Transparent" BorderBrush="Transparent">
                    <Button.Style>
                        <Style BasedOn="{StaticResource ButtonDefault}" TargetType="Button">
                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="0">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                
                <Button Command="{Binding SaveNewUserEditLEDSetup}" CommandParameter="save"  Click="Confirmed" Margin="10"  Content="Done" >
                    <Button.Style>
                        <Style BasedOn="{StaticResource ButtonPrimary}" TargetType="Button">
                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="2">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>   
                        </Style>
                    </Button.Style>
                </Button>
                <Button IsEnabled="{Binding IsNextable}" Margin="10" Command="{Binding JumpToNextWizardStateCommand}" CommandParameter="next"   Content="Next" >
                    <Button.Style>
                        <Style BasedOn="{StaticResource ButtonPrimary}" TargetType="Button">
                            <Setter Property="Visibility" Value="Visible"></Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="2">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                
            </StackPanel>
        </Grid>
        <Grid  Margin="20,0,0,0" Grid.Row="1" Grid.Column="0">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="0">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
           
                <StackPanel>
                <Border Margin="10" CornerRadius="8" Padding="5,5" Background="{StaticResource DarkMaskBrush}">
                    <StackPanel>
                        <hc:NumericUpDown Minimum="1" HorizontalAlignment="Left"  Name="MatrixWidth" HorizontalContentAlignment="Center" Value="{Binding CurrentOutput.OutputNumLEDX}"
                     hc:InfoElement.Title="Map Width" Margin="0,0,0,20" hc:InfoElement.Necessary="True" Style="{StaticResource NumericUpDownPlus}"/>
                        <hc:NumericUpDown Minimum="1" HorizontalAlignment="Left"  Name="MatrixHeight" HorizontalContentAlignment="Center" Value="{Binding CurrentOutput.OutputNumLEDY}"
                     hc:InfoElement.Title="Map Height" Margin="0,0,0,1" hc:InfoElement.Necessary="True" Style="{StaticResource NumericUpDownPlus}"/>
                    </StackPanel>
                </Border>
                <Border Margin="10,8" CornerRadius="8" Padding="5,5" Background="{StaticResource DarkMaskBrush}">
                    <StackPanel>
                       
                        <Button HorizontalAlignment="Stretch" Margin="0,1,0,15"  Command="{Binding SetAllSpotActiveCommand}"  Style="{StaticResource ButtonDefault}" Content="All" CommandParameter="Reset"/>
                        <Button HorizontalAlignment="Stretch" Margin="0,15,0,1"  Command="{Binding SetBorderSpotActiveCommand}"  Style="{StaticResource ButtonDefault}" Content="Rectangle" CommandParameter="Reset"/>
                        
                    </StackPanel>
                </Border>
                <hc:Badge HorizontalAlignment="Stretch" Value="{Binding Count}" BadgeMargin="0,-14,-10,0" Height="30" Margin="10,20,10,20" Style="{StaticResource BadgePrimary}">
                    <Button HorizontalAlignment="Stretch"  Command="{Binding ResetCountCommand}"  Style="{StaticResource ButtonDefault}" Content="Reset" CommandParameter="ResetPID"/>
                </hc:Badge>
            </StackPanel>
            
            
            
        </Grid>
        <Grid Grid.Column="1" VerticalAlignment="Top" HorizontalAlignment="Center"  ClipToBounds="true" Grid.Row="1" x:Name="MotherGrid">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="0">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <richCanvas:RichItemsControl   HorizontalAlignment="Left" VerticalAlignment="Top"  Name="PreviewBox">
         
              
                <ItemsControl 
                          Name="PreviewGird"  
                          BorderThickness="1"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center" 
                          ItemsSource="{Binding CurrentOutput.OutputLEDSetup.Spots}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas HorizontalAlignment="Left" VerticalAlignment="Top" Name="PreviewCanvas"
                               
                                Margin="0" 
                                Width="{Binding CurrentOutput.Width}" 
                                Height="{Binding CurrentOutput.Height}" >
                               
                            </Canvas>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left" Value="{Binding Rectangle.X}"/>
                            <Setter Property="Canvas.Top" Value="{Binding Rectangle.Y}"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>

                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Rectangle ToolTip="{Binding id}" Stroke="OrangeRed" StrokeThickness="{Binding BorderThickness}" Width="{Binding Rectangle.Width}" Height="{Binding Rectangle.Height}">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding OnDemandColor}"  />
                                    </Rectangle.Fill>
                                    <Rectangle.Style>
                                        <Style TargetType="{x:Type Rectangle}">

                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Opacity"  Value="0.5"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Rectangle.Style>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDown" >
                                            <i:InvokeCommandAction Command="{Binding DataContext.SetSpotActiveCommand,RelativeSource={RelativeSource AncestorType={x:Type local:PIDEditWindow}}}" CommandParameter="{Binding .}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Rectangle>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </richCanvas:RichItemsControl>
            <Canvas
                x:Name="dragSelectionCanvas"
                Visibility="Collapsed">
                <Border  x:Name="dragSelectionBorder"
                     BorderBrush="Blue"
                     BorderThickness="2"
                     Background="LightBlue"
                     CornerRadius="1"
                     Opacity="0.5"/>
            </Canvas>
        </Grid>
        <Grid Grid.Column="1" VerticalAlignment="Top" HorizontalAlignment="Center"  ClipToBounds="true" Grid.Row="1" x:Name="Step2Grid">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="1">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <richCanvas:RichItemsControl ItemsSource="{Binding CurrentOutput.OutputLEDSetup.Spots}"  HorizontalAlignment="Left" VerticalAlignment="Top"  >
                <richCanvas:RichItemsControl.ItemContainerStyle>
                    <Style TargetType="richCanvas:RichItemContainer">

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type richCanvas:RichItemContainer}">
                                    <Border x:Name="Bd" 
                                            Padding="0"
                                            SnapsToDevicePixels="True">
                                        <ContentPresenter 
                                            HorizontalAlignment="Center" 
                                            SnapsToDevicePixels="True" 
                                            VerticalAlignment="Center"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                                <Condition Property="IsSelected" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>-->
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryTextBrush}"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="False"/>
                                                <Condition Property="IsSelected" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>-->
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryBrush}"/>
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryBrush}"/>
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                        </MultiTrigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                     
                   
                        <Setter Property="Tag"
                            Value="{Binding DataContext, ElementName=window}" />
                        <!--<Setter Property="helpers:AttachedAdorner.HasHoverAdorner"
                            Value="{Binding IsSelectable}" />-->
                        <!--<Setter Property="helpers:AttachedAdorner.ShowResizeAdorner"
                            Value="{Binding IsSelected}" />-->
                        <Setter Property="Top"
                            Value="{Binding Rectangle.Top, Mode=TwoWay}" />

                        <Setter Property="Left"
                            Value="{Binding Rectangle.Left, Mode=TwoWay}" />

                        <Setter Property="IsSelected"
                            Value="{Binding IsSelected, Mode=TwoWay}" />

                        <Setter Property="Width"
                            Value="{Binding Rectangle.Width, Mode=TwoWay}" />

                        <Setter Property="Height"
                            Value="{Binding Rectangle.Height, Mode=TwoWay}" />

                        <Setter Property="IsSelectable"
                            Value="false" />

                        <Setter Property="IsDraggable"
                            Value="false" />

                        <Setter Property="HasCustomBehavior"
                            Value="{Binding HasCustomBehavior}" />

                        <Setter Property="ShouldBringIntoView"
                            Value="{Binding ShouldBringIntoView, Mode=TwoWay}" />

                        <Setter Property="Scale"
                            Value="{Binding Scale, Mode=TwoWay}" />

                    </Style>
                </richCanvas:RichItemsControl.ItemContainerStyle>

            </richCanvas:RichItemsControl>
          
        </Grid>
        <Grid  Margin="20,0,0,0" Grid.Row="1" Grid.Column="0">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Hidden"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="1">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <StackPanel>
                <Border Margin="10" CornerRadius="8" Padding="5,5" Background="{StaticResource DarkMaskBrush}">
                    <StackPanel>
                        <Button HorizontalAlignment="Stretch" Margin="0,1,0,15"  Command="{Binding SetPIDNeutral}"  Style="{StaticResource ButtonDefault}" Content="Neutral" CommandParameter="Reset"/>
                        <Button HorizontalAlignment="Stretch" Margin="0,15,0,1"  Command="{Binding SetPIDReverseNeutral}"  Style="{StaticResource ButtonDefault}" Content="Reverse" CommandParameter="Reset"/>
                    </StackPanel>
                   
                </Border>
                    <hc:Badge   HorizontalAlignment="Stretch" Value="{Binding MaxLEDCount,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  BadgeMargin="0,-14,-10,0" Height="30" Margin="10,20,10,20" Style="{StaticResource BadgePrimary}">
                    <Button  HorizontalAlignment="Stretch" Command="{Binding ResetMaxCountCommand}"  Style="{StaticResource ButtonDefault}" Content="Click to reset" CommandParameter="Reset"/>
                </hc:Badge>
                
               

            </StackPanel>

        </Grid>

        <Grid Grid.Column="1" Grid.Row="1" HorizontalAlignment="Center" MinWidth="300" MaxWidth="600">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="2">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <StackPanel>
                <TextBlock Text="Tạo LED Setup" Style="{StaticResource TextBlockLarge}">

                </TextBlock>
                <Grid>
                    
                </Grid>
                
                <TextBox   Text="123" MaxLength="100"   hc:InfoElement.Placeholder="Ví dụ : Keyboard" hc:InfoElement.Title="NAME" Style="{StaticResource TextBoxExtend}" hc:InfoElement.Necessary="True" />
                <TextBox   Text="{Binding CurrentOutput.OutputLEDSetup.Owner, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MaxLength="100"  hc:InfoElement.Placeholder="Ví dụ : Zooey" hc:InfoElement.Title="CREATOR" Style="{StaticResource TextBoxExtend}" hc:InfoElement.Necessary="True" />
                <TextBox   Text="{Binding CurrentOutput.OutputLEDSetup.Description, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MaxLength="100"  hc:InfoElement.Placeholder="Ví dụ : General Keyboard Matrix layout" hc:InfoElement.Title="DESCRIPTION" Style="{StaticResource TextBoxExtend}" hc:InfoElement.Necessary="False" />
           </StackPanel>
            </Grid>

        </Grid>
</hc:Window>