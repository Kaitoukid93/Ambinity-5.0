<UserControl x:Class="adrilight_content_creator.View.OutputMapingCanvansView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:adrilight_content_creator.View"
             xmlns:converters="clr-namespace:adrilight_shared.Converter;assembly=adrilight_shared"
             xmlns:drawable="clr-namespace:adrilight_shared.Models.Drawable;assembly=adrilight_shared"
             mc:Ignorable="d"
             xmlns:output="clr-namespace:adrilight_shared.Models.Device.Output;assembly=adrilight_shared"
             xmlns:richCanvas="clr-namespace:RichCanvas;assembly=RichCanvas"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:hlprs="clr-namespace:adrilight_shared.Helpers;assembly=adrilight_shared"
             xmlns:adorners="clr-namespace:adrilight_content_creator.View.Adorners"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             d:DataContext="{Binding Source={StaticResource Locator}, Path=OutputMappingViewModel}"
             DataContext="{Binding Source={StaticResource Locator}, Path=OutputMappingViewModel}"
             hlprs:perSizeBindingHelper.Active="True"
             hlprs:perSizeBindingHelper.BoundActualHeight="{Binding Canvas.CanvasHeight , Mode=TwoWay}"
             hlprs:perSizeBindingHelper.BoundActualWidth="{Binding Canvas.CanvasWidth, Mode=TwoWay}"
             >
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary>
                    <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
                    <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
                    <BooleanToVisibilityConverter x:Key="boolToVisibilityConvert" />
                    <converters:CommandToListConverter x:Key="CommandsToListConverter" />
                    <converters:StaticResourceConverter x:Key="staticResourceConverter" />
                    <converters:ThicknessToDoubleConverter x:Key="Double2ThicknessConverter" />
                    <Storyboard x:Key="SelectedTransition"
                                x:Shared="False">
                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                         From="0.6"
                                         To="1"
                                         Duration="0:0:0.2">
                        </DoubleAnimation>


                    </Storyboard>
                    <SolidColorBrush x:Key="primaryBackgroundBrush"
                                     Color="{Binding Color, Source={StaticResource PrimaryBrush}}"
                                     Opacity="0.15" />
                    <DropShadowEffect x:Key="Item.SelectedActive.Border.Shadow"
                                      BlurRadius="10"
                                      RenderingBias="Quality"
                                      ShadowDepth="1"
                                      Color="{Binding Color, Source={StaticResource PrimaryBrush}}" />
                    <DropShadowEffect x:Key="Item.MouseOver.Border.Shadow"
                                      BlurRadius="10"
                                      RenderingBias="Quality"
                                      ShadowDepth="1"
                                      Color="{Binding Color, Source={StaticResource DarkMaskBrush}}" />
                    <hc:Boolean2BooleanReConverter x:Key="booltoVreconv" />
                    <GeometryDrawing x:Key="GridStyle"
                                     Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z"
                                     Brush="{DynamicResource SecondaryBorderBrush}" />

                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <richCanvas:RichItemsControl x:Name="deviceCanvas"
                                     ItemsSource="{Binding Canvas.Items}"
                                     EnableSnapping="False"
                                     MinScale="0.1"
                                     MaxScale="100"
                                     Height="500"
                                     GridSpacing="24"
                                     DisableCache="true"
                                     EnableGrid="False"
                                     Scrolling="OnScrolling"
                                     CanSelectMultipleItems="{Binding Canvas.EnableMultipleItemSelection}"
                                     RealTimeDraggingEnabled="False"
                                     RealTimeSelectionEnabled="False"
                                     DisableAutoPanning="True"
                                     Background="{DynamicResource MainContentBackgroundBrush}"
                                     DisableScroll="True"
                                     UseLayoutRounding="False"
                                     ZoomKey="LeftCtrl"
                                     TranslateOffset="{Binding Canvas.CanvasOffset,Mode=TwoWay}"
                                     Scale="{Binding Canvas.CanvasScale,Mode=TwoWay}"
                                     MousePosition="{Binding Canvas.MousePosition, Mode=OneWayToSource}">
            <!--<richCanvas:RichItemsControl.CacheMode>
    <BitmapCache EnableClearType="False" RenderAtScale="1.0" SnapsToDevicePixels="False"/>
</richCanvas:RichItemsControl.CacheMode>-->
            <richCanvas:RichItemsControl.SelectionRectangleStyle>
                <Style TargetType="Rectangle">
                    <Setter Property="Fill"
                            Value="{Binding Canvas.SelectionRectangle.FillColor,Converter={StaticResource ColorToBrushConverter}}" />
                    <Setter Property="Stroke"
                            Value="{Binding Canvas.SelectionRectangle.StrokeColor,Converter={StaticResource ColorToBrushConverter}}" />
                    <Setter Property="StrokeDashArray"
                            Value="{Binding Canvas.SelectionRectangle.StrokeDashArray}" />
                    <Setter Property="StrokeThickness"
                            Value="{Binding Canvas.SelectionRectangle.StrokeThickness}" />
                </Style>
            </richCanvas:RichItemsControl.SelectionRectangleStyle>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding RichCanvasMouseButtonDownCommand}"
                                           CommandParameter="unselect" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding RichCanvasMouseButtonUpCommand}"
                                           CommandParameter="mouseup" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <richCanvas:RichItemsControl.Resources>

                <DataTemplate x:Key="HoverAdornerTemplate">
                    <Border Opacity="0.5"
                            Background="White">
                    </Border>

                </DataTemplate>
                <DataTemplate x:Key="SelectedAdornerTemplate">
                    <Border BorderThickness="{Binding Tag.Canvas.CanvasItemBorder}"
                            BorderBrush="{DynamicResource PrimaryBrush}"
                            Background="Transparent">
                    </Border>

                </DataTemplate>


                <DataTemplate DataType="{x:Type output:OutputSettings}">
                    <Grid Tag="{Binding DataContext, ElementName=window}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                <i:InvokeCommandAction Command="{Binding Path=DataContext.SelectItemCommand,RelativeSource={RelativeSource AncestorType={x:Type local:OutputMapingCanvansView}}}"
                                                       CommandParameter="{Binding .}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Rectangle Stroke="{DynamicResource SecondaryBorderBrush}"
                                   Width="{Binding Width,Mode=TwoWay}"
                                   Height="{Binding Height,Mode=TwoWay}"
                                   StrokeDashArray="2"
                                   StrokeThickness="{Binding Path=DataContext.Canvas.SelectionRectangle.StrokeThickness,RelativeSource={RelativeSource AncestorType={x:Type local:OutputMapingCanvansView}}}"
                                   Fill="Transparent">
                        </Rectangle>
                        <Border MaxWidth="30"
                                MaxHeight="30"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top"
                                Background="White">
                            <Viewbox>
                                <TextBlock Margin="5"
                                           Foreground="{DynamicResource RegionBrush}"
                                           Style="{DynamicResource TextBlockDefault}"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Top"
                                           Text="{Binding OutputName}" />
                            </Viewbox>
                        </Border>
                        <Grid>
                            <hc:TransitioningContentControl TransitionStoryboard="{DynamicResource SelectedTransition}"
                                                            Visibility="{Binding IsSelected, Converter={StaticResource boolToVisibilityConvert}}">
                                <Grid IsHitTestVisible="False">
                                    <Border BorderBrush="{DynamicResource WarningBrush}"
                                            BorderThickness="{Binding Path=DataContext.Canvas.CanvasItemBorder,RelativeSource={RelativeSource AncestorType={x:Type local:OutputMapingCanvansView}}}">
                                    </Border>
                                </Grid>
                            </hc:TransitioningContentControl>
                            <hc:TransitioningContentControl TransitionStoryboard="{DynamicResource SelectedTransition}"
                                                            Visibility="{Binding IsMouseOver, Converter={StaticResource boolToVisibilityConvert}}">
                                <Grid IsHitTestVisible="False">
                                    <Border BorderBrush="{DynamicResource WarningBrush}"
                                            BorderThickness="{Binding Path=DataContext.Canvas.CanvasItemBorder,RelativeSource={RelativeSource AncestorType={x:Type local:OutputMapingCanvansView}}}">
                                    </Border>
                                </Grid>
                            </hc:TransitioningContentControl>
                        </Grid>
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type drawable:ImageVisual}">
                    <Grid>
                        <Image Source="{Binding ImagePath}"
                               Stretch="Uniform" />
                        <Rectangle StrokeThickness="1"
                                   Width="{Binding Width}"
                                   Height="{Binding Height}">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected}"
                                                     Value="True">
                                            <Setter Property="Fill"
                                                    Value="{DynamicResource _primaryBackgroundColor}" />
                                            <Setter Property="Stroke"
                                                    Value="{DynamicResource PrimaryBrush}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsSelected}"
                                                     Value="False">
                                            <Setter Property="Fill"
                                                    Value="Transparent" />
                                            <Setter Property="Stroke"
                                                    Value="Transparent" />
                                        </DataTrigger>
                                    </Style.Triggers>

                                </Style>
                            </Rectangle.Style>
                        </Rectangle>

                    </Grid>

                </DataTemplate>
            </richCanvas:RichItemsControl.Resources>

            <richCanvas:RichItemsControl.ItemContainerStyle>

                <Style TargetType="richCanvas:RichItemContainer">
                    <Setter Property="hlprs:EventToCommand.Event"
                            Value="LeftChanged, TopChanged" />
                    <Setter Property="hlprs:EventToCommand.Command">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource CommandsToListConverter}">
                                <Binding Path="LeftChangedCommand" />
                                <Binding Path="TopChangedCommand" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>

                    <Setter Property="RenderTransformOrigin"
                            Value="0.5,0.5" />
                    <Setter Property="hlprs:EventToCommand.CanExecute"
                            Value="{Binding IsSelected}" />
                    <Setter Property="Tag"
                            Value="{Binding DataContext, ElementName=window}" />
                    <Setter Property="adorners:AttachedAdorner.HasHoverAdorner"
                            Value="{Binding IsSelectable}" />
                    <Setter Property="adorners:AttachedAdorner.ShowResizeAdorner"
                            Value="{Binding IsSelected}" />
                    <Setter Property="Visibility"
                            Value="{Binding IsVisible,Converter={StaticResource boolToVisibilityConvert}}" />
                    <Setter Property="Top"
                            Value="{Binding GetRect.Top}" />

                    <Setter Property="Left"
                            Value="{Binding GetRect.Left}" />

                    <Setter Property="IsSelected"
                            Value="{Binding IsSelected, Mode=TwoWay}" />

                    <Setter Property="Width"
                            Value="{Binding Width, Mode=TwoWay}" />

                    <Setter Property="Height"
                            Value="{Binding Height, Mode=TwoWay}" />

                    <Setter Property="IsSelectable"
                            Value="{Binding IsSelectable}" />

                    <Setter Property="IsDraggable"
                            Value="{Binding IsDraggable}" />

                    <Setter Property="HasCustomBehavior"
                            Value="{Binding HasCustomBehavior}" />

                    <Setter Property="ShouldBringIntoView"
                            Value="False" />
                    <Setter Property="Cursor"
                            Value="Arrow" />

                </Style>
            </richCanvas:RichItemsControl.ItemContainerStyle>
        </richCanvas:RichItemsControl>
    </Grid>
</UserControl>
