<UserControl x:Class="adrilight.View.DeviceLiveView"
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
           xmlns:hc="https://handyorg.github.io/handycontrol"
           xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
           xmlns:converters="clr-namespace:adrilight.Converter" 
           xmlns:richCanvas="clr-namespace:RichCanvas;assembly=RichCanvas"
           mc:Ignorable="d"
             x:Name="window"
           xmlns:behaviors="clr-namespace:adrilight.Helpers.Behaviors"
                 xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
           xmlns:helpers="clr-namespace:adrilight.Helpers"
           xmlns:local ="clr-namespace:adrilight"
           xmlns:view="clr-namespace:adrilight.View"
           xmlns:spot ="clr-namespace:adrilight.Spots"
           xmlns:settings ="clr-namespace:adrilight.Settings"
              xmlns:lottie="clr-namespace:LottieSharp;assembly=LottieSharp"
           d:DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}"
           DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}">



    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary
                    Source="ControlStyle.xaml">
                    <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
                    <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
                    <BooleanToVisibilityConverter x:Key="boolToVisibilityConvert" />
                    <converters:CommandToListConverter x:Key="CommandsToListConverter" />
                    <converters:StaticResourceConverter x:Key="staticResourceConverter"/>
                    <DropShadowEffect x:Key="Item.SelectedActive.Border.Shadow" BlurRadius="10"   RenderingBias ="Quality" ShadowDepth ="1" Color ="{Binding Color, Source={StaticResource PrimaryBrush}}"/>
                    <DropShadowEffect x:Key="Item.MouseOver.Border.Shadow" BlurRadius="10"   RenderingBias ="Quality" ShadowDepth ="1" Color ="{Binding Color, Source={StaticResource DarkMaskBrush}}"/>
                    <hc:Boolean2BooleanReConverter x:Key="booltoVreconv"/>
                    <GeometryDrawing x:Key="GridStyle"
                         Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z"
                         Brush="{DynamicResource SecondaryBorderBrush}" />

                </ResourceDictionary>

            </ResourceDictionary.MergedDictionaries>

        </ResourceDictionary>

    </UserControl.Resources>




    <Grid>
        <richCanvas:RichItemsControl
                ItemsSource="{Binding LiveViewItems}"
                GridStyle="{StaticResource GridStyle}"
                EnableSnapping="False"
                MaxScale="10"
                GridSpacing="24"
                EnableGrid="False"
                Scrolling="OnScrolling"
                CanSelectMultipleItems="True"
                RealTimeDraggingEnabled="True"
                RealTimeSelectionEnabled="False"
                DisableAutoPanning="True"
                Background="Transparent"               
                DisableScroll="True"
                ZoomKey="Z"     
                TranslateOffset="{Binding CurrentLiveViewOffset,Mode=TwoWay}"
                Scale="{Binding CurrentLiveViewScale,Mode=TwoWay}">
            <richCanvas:RichItemsControl.SelectionRectangleStyle>
                <Style TargetType="Rectangle">
                    <Setter Property="Opacity" Value="0.1" />
                    <Setter Property="Fill" Value="White" />
                    <Setter Property="Stroke" Value="{DynamicResource PrimaryBrush}" />
                    <Setter Property="StrokeThickness" Value="3" />
                </Style>
            </richCanvas:RichItemsControl.SelectionRectangleStyle>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding DataContext.UnselectAllLiveiewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="unselect" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <richCanvas:RichItemsControl.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Group SelectedItems" CommandParameter="group" Command="{Binding GroupSelectedZoneForMaskedControlCommand}">
                        <MenuItem.Icon>
                            <Path Data="{StaticResource addnew}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                        </MenuItem.Icon>
                    </MenuItem>

                </ContextMenu>
            </richCanvas:RichItemsControl.ContextMenu>

            <richCanvas:RichItemsControl.Resources>
                <DataTemplate DataType="{x:Type local:LEDSetup}">
                    <Grid>
                        <Grid>
                            <ItemsControl ToolTip="{Binding Name}" Margin="0,-1,0,0"  
                                    Name="PreviewGird"  
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top" 
                                    ItemsSource="{Binding Spots,Mode=TwoWay}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas 
                                                HorizontalAlignment="Center" 
                                                VerticalAlignment="Top" 
                                                Name="PreviewCanvas"
                                                Margin="0" 
                                                Width="{Binding Width,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" 
                                                Height="{Binding Height, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </Canvas>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemContainerStyle>
                                    <Style TargetType="ContentPresenter">
                                        <Setter Property="Canvas.Left" Value="{Binding Left}"/>
                                        <Setter Property="Canvas.Top" Value="{Binding Top}"/>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Height="{Binding Height}" Width="{Binding Width}">
                                            
                                            <Path RenderTransformOrigin="0.5,0.5" Data="{Binding Shape,Converter={converters:StaticResourceConverter}}"
                                                Stretch="Fill"
                                                Width="{Binding Width,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                                                Height="{Binding Height,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                                                <Path.Fill>
                                                    <SolidColorBrush Color="{Binding OnDemandColor}"  />
                                                </Path.Fill>
                                                <Path.Style>
                                                    <Style TargetType="{x:Type Path}">
                                                        <Style.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Opacity"  Value="0.5"/>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                        <Setter Property="RenderTransform" >
                                                            <Setter.Value>
                                                                <TransformGroup >
                                                                    <ScaleTransform/>
                                                                    <TranslateTransform  />
                                                                    <RotateTransform Angle="{Binding Angle}" />
                                                                </TransformGroup>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Path.Style>
                                            </Path>
                                            <Viewbox RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
                                                <Viewbox.Style>
                                                    <Style TargetType="{x:Type Viewbox}">
                                                        <Setter Property="RenderTransform">
                                                            <Setter.Value>
                                                                <TransformGroup >
                                                                    <ScaleTransform/>
                                                                    <TranslateTransform  />
                                                                    <RotateTransform Angle="{Binding Angle}" />
                                                                </TransformGroup>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="Visibility" Value="Collapsed">
                                                            
                                                        </Setter>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding ="{Binding DataContext.IsInIDEditStage,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                   
                                                </Viewbox.Style>
                                                <TextBlock Margin="5" Padding="0" Foreground="White" Text="{Binding VID}" Style="{DynamicResource TextBlockDefault}">
                                                </TextBlock>
                                            </Viewbox>
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                        </Grid>
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:PathGuide}">
                    <Grid>
                        <Path Data="{Binding Geometry,Converter={converters:StaticResourceConverter}}" 
                              Stretch="Fill"
                              Fill="White"
                              Opacity="0.1"
                              Width="{Binding Width}"
                              Height="{Binding Height}">
                        </Path>
                        <TextBlock Text="{Binding DataContext.VIDCount,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}"/>
                    </Grid>
                   
                    
                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:FanMotor}">
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Viewbox>
                            <Border Margin="10" HorizontalAlignment="Center" VerticalAlignment="Center" CornerRadius="7" Background="{DynamicResource MainContentBackgroundBrush}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border Width="40" Height="40" HorizontalAlignment="Left" Margin="5" CornerRadius="4" Background="{DynamicResource SecondaryRegionBrush}">
                                    <Path Margin="5"  Data="{DynamicResource Fan}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                </Border>
                                <Grid Grid.Row="1">
                                    <StackPanel>
                                        <TextBlock Margin="5,0,0,0" Text="{Binding Name}"/>
                                            <TextBlock Margin="5,5,0,0" Text="{Binding CurrentPWMValue}"/>
                                        <Viewbox>


                                            <Grid>
                                                <Grid.Resources>
                                                    <Style TargetType="lvc:LineSeries">
                                                        <Setter Property="StrokeThickness" Value="2"></Setter>
                                                        <Setter Property="Stroke" Value="{StaticResource PrimaryBrush}"></Setter>
                                                        <Setter Property="Fill">
                                                            <Setter.Value>
                                                                <SolidColorBrush Color ="{Binding Color, Source={StaticResource PrimaryBrush}}" Opacity="0.1"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="PointGeometrySize" Value="0"></Setter>
                                                        <Setter Property="LineSmoothness" Value="0"></Setter>
                                                    </Style>
                                                    <Style TargetType="lvc:Axis">
                                                        <Setter Property="ShowLabels" Value="False"></Setter>
                                                        <Setter Property="IsEnabled" Value="False"></Setter>

                                                    </Style>
                                                </Grid.Resources>
                                                <lvc:CartesianChart HorizontalAlignment="Right" VerticalAlignment="Center" Width="200" Height="auto" Margin="1,0,5,0"   Hoverable="True" DataTooltip="{x:Null}">
                                                    <lvc:CartesianChart.Series>
                                                        <lvc:LineSeries Values="{Binding LineValues}">

                                                        </lvc:LineSeries>
                                                    </lvc:CartesianChart.Series>
                                                    <lvc:CartesianChart.AxisX>
                                                        <!--a small visual improvement, lets hide the first points (x = 0, x=1) to get better animations-->
                                                        <lvc:Axis MinValue="2"></lvc:Axis>
                                                    </lvc:CartesianChart.AxisX>
                                                </lvc:CartesianChart>

                                            </Grid>
                                        </Viewbox>
                                    </StackPanel>

                                </Grid>
                            </Grid>
                        </Border>
                        </Viewbox>
                        <Rectangle Width="{Binding Width}" Height="{Binding Height}" Fill="Transparent">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Rectangle>
                    </Grid>
                </DataTemplate>
                <DataTemplate x:Key="SelectedAdornerTemplate">
                    <Border BorderBrush="{DynamicResource SecondaryBorderBrush}"
                            BorderThickness="1" CornerRadius="4"
                            Background="{DynamicResource SecondaryRegionBrush}">
                        <TextBlock Foreground="White"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   MaxWidth="60">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0} : {1}">
                                    <Binding Path="Left" />
                                    <Binding Path="Top" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </Border>
                </DataTemplate>

                <DataTemplate x:Key="HoverAdornerTemplate">
                    <Border BorderBrush="{DynamicResource PrimaryBrush}"
                            BorderThickness="3">
                    </Border>
                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:Border}">
                    <Grid Tag="{Binding DataContext, ElementName=window}">
                        <Grid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Ungroup" Command="{Binding PlacementTarget.Tag.UnGroupZoneCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding}">
                                    <MenuItem.Icon>
                                        <Path Data="{StaticResource addnew}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                    </MenuItem.Icon>
                                </MenuItem>

                            </ContextMenu>
                        </Grid.ContextMenu>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewGroupCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Rectangle Stroke="{DynamicResource SecondaryBorderBrush}"
                                   Width="{Binding Width}"
                                   Height="{Binding Height}"
                               StrokeThickness="2"
                               Fill="Transparent"
                               StrokeDashArray="2"
                               IsHitTestVisible="True">
                        </Rectangle>
                        <Border HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource PrimaryBrush}">
                            <TextBlock Margin="2" Style="{DynamicResource TextBlockDefault}" HorizontalAlignment="Left" VerticalAlignment="Top" Text="{Binding Name}"/>
                        </Border>
                    </Grid>

                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:ScreenBound}">
                    <Grid>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Margin="20,10,5,5" HorizontalAlignment="Left" VerticalAlignment="Top" Text="Screen" Style="{DynamicResource TextBlockLarge}"/>
                            <TextBlock Margin="5,10" HorizontalAlignment="Left" VerticalAlignment="Top" Text="at" Style="{DynamicResource TextBlockLarge}"/>
                            <TextBlock Margin="5,10" HorizontalAlignment="Left" VerticalAlignment="Top"  Style="{DynamicResource TextBlockLarge}">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0} x {1}">
                                        <Binding Path="Width" />
                                        <Binding Path="Height" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>

                        </StackPanel>

                        <Rectangle Stroke="{DynamicResource SecondaryBorderBrush}"
                                   Width="{Binding Width}"
                                   Height="{Binding Height}"
                               StrokeThickness="5"
                               Fill="Transparent"
                               StrokeDashArray="2"
                               IsHitTestVisible="{Binding IsSelectable}">
                        </Rectangle>
                    </Grid>

                </DataTemplate>

            </richCanvas:RichItemsControl.Resources>

            <richCanvas:RichItemsControl.ItemContainerStyle>
                <Style TargetType="richCanvas:RichItemContainer">

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type richCanvas:RichItemContainer}">
                                <Border x:Name="Bd" 
                                            Padding="0"
                                            SnapsToDevicePixels="True">
                                    <ContentPresenter 
                                            HorizontalAlignment="Center" 
                                            SnapsToDevicePixels="True" 
                                            VerticalAlignment="Center">
                                    </ContentPresenter>

                                </Border>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>-->
                                        <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryTextBrush}"/>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="False"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>-->
                                        <Setter Property="BorderThickness" TargetName="Bd" Value="0"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                            <Condition Property="IsSelected" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PrimaryTextBrush}"/>
                                        <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                            <Condition Property="IsSelected" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryBrush}"/>
                                        <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                    </MultiTrigger>

                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="helpers:EventToCommand.Event"
                            Value="LeftChanged, TopChanged" />
                    <Setter Property="helpers:EventToCommand.Command">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource CommandsToListConverter}">
                                <Binding Path="LeftChangedCommand" />
                                <Binding Path="TopChangedCommand" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                    <Setter Property="helpers:EventToCommand.CanExecute"
                            Value="{Binding IsSelected}" />
                    <Setter Property="Tag"
                            Value="{Binding DataContext, ElementName=window}" />
                    <Setter Property="helpers:AttachedAdorner.HasHoverAdorner"
                            Value="{Binding IsSelectable}" />
                    <Setter Property="helpers:AttachedAdorner.ShowResizeAdorner"
                            Value="{Binding IsResizeable}" />
                    <Setter Property="Top"
                            Value="{Binding GetRect.Top}" />

                    <Setter Property="Left"
                            Value="{Binding GetRect.Left}" />

                    <Setter Property="IsSelected"
                            Value="{Binding IsSelected, Mode=TwoWay}" />

                    <Setter Property="Width"
                            Value="{Binding Width, Mode=TwoWay}" />

                    <Setter Property="Height"
                            Value="{Binding Height, Mode=TwoWay}" />

                    <Setter Property="IsSelectable"
                            Value="{Binding IsSelectable}" />

                    <Setter Property="IsDraggable"
                            Value="False" />

                    <Setter Property="HasCustomBehavior"
                            Value="{Binding HasCustomBehavior}" />

                    <Setter Property="ShouldBringIntoView"
                            Value="False" />

                    <Setter Property="Scale"
                            Value="{Binding Scale, Mode=TwoWay}" />

              

                    <Style.Triggers>
                        <DataTrigger Binding="{Binding DataType}" Value="{x:Type settings:PathGuide}">
                            <Setter Property="Top"
                            Value="{Binding Top,Mode=TwoWay}" />
                            <Setter Property="Left"
                            Value="{Binding Left,Mode=TwoWay}" />
                            <Setter Property="IsDraggable"
                            Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Opacity">
                                <Setter.Value>
                                    1.0
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Opacity">
                                <Setter.Value>
                                    0.7
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </richCanvas:RichItemsControl.ItemContainerStyle>
        </richCanvas:RichItemsControl>
    </Grid>


</UserControl>