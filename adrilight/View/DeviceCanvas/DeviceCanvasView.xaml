<UserControl x:Class="adrilight.View.DeviceCanvas.DeviceCanvasView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:adrilight.View.DeviceCanvas"
             xmlns:adorners="clr-namespace:adrilight.View.DeviceCanvas.Adorners"
             xmlns:properties="clr-namespace:adrilight_shared.Properties;assembly=adrilight_shared"
             xmlns:converters="clr-namespace:adrilight_shared.Converter;assembly=adrilight_shared"
             xmlns:slaveDevices="clr-namespace:adrilight_shared.Models.Device.SlaveDevice;assembly=adrilight_shared"
             xmlns:zone="clr-namespace:adrilight_shared.Models.Device.Zone;assembly=adrilight_shared"
             xmlns:spot="clr-namespace:adrilight_shared.Models.Device.Zone.Spot;assembly=adrilight_shared"
             xmlns:dataVisualizer="clr-namespace:adrilight_shared.Models.DataVisualizer;assembly=adrilight_shared"
             xmlns:drawable="clr-namespace:adrilight_shared.Models.Drawable;assembly=adrilight_shared"
             xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
             xmlns:richCanvas="clr-namespace:RichCanvas;assembly=RichCanvas"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             xmlns:vm="clr-namespace:adrilight_shared.ViewModel;assembly=adrilight_shared"
             mc:Ignorable="d"
             x:Name="window"
             xmlns:hlprs="clr-namespace:adrilight_shared.Helpers;assembly=adrilight_shared"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             d:DataContext="{d:DesignInstance vm:DeviceCanvasViewModel, IsDesignTimeCreatable=True}"
             hlprs:perSizeBindingHelper.Active="True"
             hlprs:perSizeBindingHelper.BoundActualHeight="{Binding Canvas.CanvasHeight , Mode=TwoWay}"
             hlprs:perSizeBindingHelper.BoundActualWidth="{Binding Canvas.CanvasWidth, Mode=TwoWay}"
             d:DesignHeight="450"
             d:DesignWidth="800">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary>
                    <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
                    <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
                    <BooleanToVisibilityConverter x:Key="boolToVisibilityConvert" />
                    <converters:CommandToListConverter x:Key="CommandsToListConverter" />
                    <converters:StaticResourceConverter x:Key="staticResourceConverter" />
                    <converters:ThicknessToDoubleConverter x:Key="Double2ThicknessConverter" />
                    <SolidColorBrush x:Key="primaryBackgroundBrush"
                                     Color="{Binding Color, Source={StaticResource PrimaryBrush}}"
                                     Opacity="0.15" />
                    <DropShadowEffect x:Key="Item.SelectedActive.Border.Shadow"
                                      BlurRadius="10"
                                      RenderingBias="Quality"
                                      ShadowDepth="1"
                                      Color="{Binding Color, Source={StaticResource PrimaryBrush}}" />
                    <DropShadowEffect x:Key="Item.MouseOver.Border.Shadow"
                                      BlurRadius="10"
                                      RenderingBias="Quality"
                                      ShadowDepth="1"
                                      Color="{Binding Color, Source={StaticResource DarkMaskBrush}}" />
                    <hc:Boolean2BooleanReConverter x:Key="booltoVreconv" />
                    <GeometryDrawing x:Key="GridStyle"
                                     Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z"
                                     Brush="{DynamicResource SecondaryBorderBrush}" />
                   
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <richCanvas:RichItemsControl x:Name="deviceCanvas"
                                     ItemsSource="{Binding Canvas.Items}"
                                     GridStyle="{StaticResource GridStyle}"
                                     EnableSnapping="False"
                                     MinScale="0.1"
                                     MaxScale="100"
                                     GridSpacing="24"
                                     DisableCache="true"
                                     EnableGrid="False"
                                     Scrolling="OnScrolling"
                                     CanSelectMultipleItems="{Binding Canvas.EnableMultipleItemSelection}"
                                     RealTimeDraggingEnabled="False"
                                     RealTimeSelectionEnabled="False"
                                     DisableAutoPanning="True"
                                     Background="Transparent"
                                     DisableScroll="True"
                                     UseLayoutRounding="False"
                                     ZoomKey="LeftCtrl"
                                     TranslateOffset="{Binding Canvas.CanvasOffset,Mode=TwoWay}"
                                     Scale="{Binding Canvas.CanvasScale,Mode=TwoWay}"
                                     MousePosition="{Binding Canvas.MousePosition, Mode=OneWayToSource}">
            <!--<richCanvas:RichItemsControl.CacheMode>
           <BitmapCache EnableClearType="False" RenderAtScale="1.0" SnapsToDevicePixels="False"/>
       </richCanvas:RichItemsControl.CacheMode>-->
            <richCanvas:RichItemsControl.SelectionRectangleStyle>
                <Style TargetType="Rectangle">
                    <Setter Property="Fill"
                            Value="{Binding Canvas.SelectionRectangle.FillColor,Converter={StaticResource ColorToBrushConverter}}" />
                    <Setter Property="Stroke"
                            Value="{Binding Canvas.SelectionRectangle.StrokeColor,Converter={StaticResource ColorToBrushConverter}}" />
                    <Setter Property="StrokeDashArray"
                            Value="{Binding Canvas.SelectionRectangle.StrokeDashArray}" />
                    <Setter Property="StrokeThickness"
                            Value="{Binding Canvas.SelectionRectangle.StrokeThickness}" />
                </Style>
            </richCanvas:RichItemsControl.SelectionRectangleStyle>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding RichCanvasMouseButtonDownCommand}"
                                           CommandParameter="unselect" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding RichCanvasMouseButtonUpCommand}"
                                           CommandParameter="mouseup" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <richCanvas:RichItemsControl.Resources>
                <DataTemplate DataType="{x:Type slaveDevices:ARGBLEDSlaveDevice}">
                    <Canvas IsHitTestVisible="False"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="{Binding Width,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                            Height="{Binding Height, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                        <Grid>
                            <Image RenderTransformOrigin="0.5,0.5"
                                   Stretch="Uniform"
                                   Source="{Binding Thumbnail}"
                                   Canvas.Left="{Binding Image.Left}"
                                   Canvas.Top="{Binding Image.Top}"
                                   Height="{Binding Image.Height}"
                                   RenderOptions.BitmapScalingMode="HighQuality"
                                   Width="{Binding Image.Width}">
                                <Image.LayoutTransform>
                                    <RotateTransform Angle="{Binding Image.Angle,Mode=TwoWay}" />
                                </Image.LayoutTransform>
                            </Image>
                        </Grid>

                    </Canvas>
                </DataTemplate>
                
                <DataTemplate DataType="{x:Type zone:LEDSetup}">
                    <Grid>
                        <dataVisualizer:ZoneVisualizer  Width="{Binding Width}"
                                                        Height="{Binding Height}"
                                                        Zone="{Binding}"
                                                        RenderOptions.BitmapScalingMode="Linear">
                            <dataVisualizer:ZoneVisualizer.Style>
                                <Style TargetType="dataVisualizer:ZoneVisualizer">
                                    <Setter Property="IsHitTestVisible"
                                            Value="{Binding IsSelectable}" />
                                </Style>
                            </dataVisualizer:ZoneVisualizer.Style>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectItemCommand,RelativeSource={RelativeSource AncestorType={x:Type local:DeviceCanvasView}}}"
                                                           CommandParameter="{Binding .}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </dataVisualizer:ZoneVisualizer>
                        <Grid>
                            <Viewbox>
                                <TextBlock Margin="20"
                                           Text="{Binding ZoneWarningText}"
                                           Style="{DynamicResource TextBlockDefaultWarning}" />
                            </Viewbox>
                        </Grid>
                        <adorners:AdornerView>
                            
                        </adorners:AdornerView>

                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type drawable:PathGuide}">
                    <Grid>
                        <Path Data="{Binding Geometry,Converter={converters:StaticResourceConverter}}"
                              Stretch="Fill"
                              Fill="{Binding VisualProperties.FillColor,Converter={StaticResource ColorToBrushConverter}}"
                              Opacity="0.25"
                              Width="{Binding Width}"
                              Height="{Binding Height}">
                        </Path>
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type zone:FanMotor}">
                    <Grid HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                        <Viewbox>
                            <Border Margin="10"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    CornerRadius="7"
                                    Background="{DynamicResource MainContentBackgroundBrush}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Border Width="40"
                                            Height="40"
                                            HorizontalAlignment="Left"
                                            Margin="5"
                                            CornerRadius="4"
                                            Background="{DynamicResource SecondaryRegionBrush}">
                                        <Path Margin="5"
                                              Data="{DynamicResource Fan}"
                                              Fill="{StaticResource PrimaryTextBrush}"
                                              Stretch="Uniform" />
                                    </Border>
                                    <Grid Grid.Row="1">
                                        <StackPanel>
                                            <TextBlock Margin="5,0,0,0"
                                                       Text="{Binding Name}" />
                                            <TextBlock Margin="5,5,0,0"
                                                       Text="{Binding CurrentPWMValue}" />
                                            <Viewbox>

                                                <Grid>
                                                    <Grid.Resources>
                                                        <Style TargetType="lvc:LineSeries">
                                                            <Setter Property="StrokeThickness"
                                                                    Value="2"></Setter>
                                                            <Setter Property="Stroke"
                                                                    Value="{DynamicResource PrimaryBrush}"></Setter>
                                                            <Setter Property="Fill">
                                                                <Setter.Value>
                                                                    <SolidColorBrush Color="{Binding Color, Source={StaticResource PrimaryBrush}}"
                                                                                     Opacity="0.1" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="PointGeometrySize"
                                                                    Value="0"></Setter>
                                                            <Setter Property="LineSmoothness"
                                                                    Value="0"></Setter>
                                                        </Style>
                                                        <Style TargetType="lvc:Axis">
                                                            <Setter Property="ShowLabels"
                                                                    Value="False"></Setter>
                                                            <Setter Property="IsEnabled"
                                                                    Value="False"></Setter>
                                                        </Style>
                                                    </Grid.Resources>
                                                    <lvc:CartesianChart HorizontalAlignment="Right"
                                                                        VerticalAlignment="Center"
                                                                        Width="200"
                                                                        Height="auto"
                                                                        Margin="1,0,5,0"
                                                                        Hoverable="True"
                                                                        DataTooltip="{x:Null}">
                                                        <lvc:CartesianChart.Series>
                                                            <lvc:LineSeries Values="{Binding LineValues}">
                                                            </lvc:LineSeries>
                                                        </lvc:CartesianChart.Series>
                                                        <lvc:CartesianChart.AxisX>

                                                            <!--a small visual improvement, lets hide the first points (x = 0, x=1) to get better animations-->

                                                            <lvc:Axis MinValue="2"></lvc:Axis>
                                                        </lvc:CartesianChart.AxisX>
                                                    </lvc:CartesianChart>
                                                </Grid>
                                            </Viewbox>
                                        </StackPanel>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Viewbox>
                        <Rectangle Width="{Binding Width}"
                                   Height="{Binding Height}"
                                   Fill="Transparent">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectItemCommand,RelativeSource={RelativeSource AncestorType={x:Type local:DeviceCanvasView}}}"
                                                           CommandParameter="{Binding .}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Rectangle>
                        
                    </Grid>
                </DataTemplate>


                <DataTemplate x:Key="HoverAdornerTemplate">
                    <Border Opacity="0.5"
                            Background="White">
                    </Border>

                </DataTemplate>
                <DataTemplate x:Key="SelectedAdornerTemplate">
                    <Border BorderThickness="{Binding Tag.Canvas.CanvasItemBorder}"
                            BorderBrush="{DynamicResource PrimaryBrush}"
                            Background="Transparent">
                    </Border>

                </DataTemplate>


                <DataTemplate DataType="{x:Type drawable:Border}">
                    <Grid Tag="{Binding DataContext, ElementName=window}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                <i:InvokeCommandAction Command="{Binding Path=DataContext.SelectItemCommand,RelativeSource={RelativeSource AncestorType={x:Type local:DeviceCanvasView}}}"
                                                       CommandParameter="{Binding .}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Rectangle Stroke="{DynamicResource SecondaryBorderBrush}"
                                   Width="{Binding Width,Mode=TwoWay}"
                                   Height="{Binding Height,Mode=TwoWay}"
                                   StrokeDashArray="2"
                                   StrokeThickness="{Binding Path=DataContext.Canvas.SelectionRectangle.StrokeThickness,RelativeSource={RelativeSource AncestorType={x:Type local:DeviceCanvasView}}}"
                                   Fill="Transparent">
                        </Rectangle>
                        <Border MaxWidth="30"
                                MaxHeight="30"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top"
                                Background="White">
                            <Viewbox>
                                <TextBlock Margin="5"
                                           Foreground="{DynamicResource RegionBrush}"
                                           Style="{DynamicResource TextBlockDefault}"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Top"
                                           Text="{Binding Name}" />
                            </Viewbox>
                        </Border>
                        <adorners:AdornerView>
                            
                        </adorners:AdornerView>
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type drawable:ScreenBound}">
                    <Grid>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Margin="20,10,5,5"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       Text="Screen"
                                       Style="{DynamicResource TextBlockLarge}" />
                            <TextBlock Margin="5,10"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       Text="at"
                                       Style="{DynamicResource TextBlockLarge}" />
                            <TextBlock Margin="5,10"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       Style="{DynamicResource TextBlockLarge}">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0} x {1}">
                                        <Binding Path="Width" />
                                        <Binding Path="Height" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </StackPanel>

                        <Rectangle Stroke="{DynamicResource SecondaryBorderBrush}"
                                   Width="{Binding Width}"
                                   Height="{Binding Height}"
                                   StrokeThickness="5"
                                   Fill="Transparent"
                                   StrokeDashArray="2"
                                   IsHitTestVisible="{Binding IsSelectable}">
                        </Rectangle>
                    </Grid>
                </DataTemplate>
            </richCanvas:RichItemsControl.Resources>

            <richCanvas:RichItemsControl.ItemContainerStyle>

                <Style TargetType="richCanvas:RichItemContainer">
                    <Setter Property="hlprs:EventToCommand.Event"
                            Value="LeftChanged, TopChanged" />
                    <Setter Property="hlprs:EventToCommand.Command">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource CommandsToListConverter}">
                                <Binding Path="LeftChangedCommand" />
                                <Binding Path="TopChangedCommand" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                    
                    <Setter Property="RenderTransformOrigin"
                            Value="0.5,0.5" />
                    <Setter Property="hlprs:EventToCommand.CanExecute"
                            Value="{Binding IsSelected}" />
                    <Setter Property="Tag"
                            Value="{Binding DataContext, ElementName=window}" />
                    <Setter Property="adorners:AttachedAdorner.HasHoverAdorner"
                            Value="{Binding IsSelectable}" />
                    <Setter Property="adorners:AttachedAdorner.ShowResizeAdorner"
                            Value="{Binding IsSelected}" />
                    <Setter Property="Visibility"
                            Value="{Binding IsVisible,Converter={StaticResource boolToVisibilityConvert}}" />
                    <Setter Property="Top"
                            Value="{Binding GetRect.Top}" />

                    <Setter Property="Left"
                            Value="{Binding GetRect.Left}" />

                    <Setter Property="IsSelected"
                            Value="{Binding IsSelected, Mode=TwoWay}" />

                    <Setter Property="Width"
                            Value="{Binding Width, Mode=TwoWay}" />

                    <Setter Property="Height"
                            Value="{Binding Height, Mode=TwoWay}" />

                    <Setter Property="IsSelectable"
                            Value="{Binding IsSelectable}" />

                    <Setter Property="IsDraggable"
                            Value="False" />

                    <Setter Property="HasCustomBehavior"
                            Value="{Binding HasCustomBehavior}" />

                    <Setter Property="ShouldBringIntoView"
                            Value="False" />
                    <Setter Property="Cursor"
                            Value="Arrow" />
                    <Style.Triggers>
                        <!--<DataTrigger Binding="{Binding Path=DataContext.IsInIDEditStage,RelativeSource={RelativeSource AncestorType={x:Type lco:DeviceLiveView}}}"
                                     Value="True">
                            <Setter Property="IsSelectable"
                                    Value="True" />
                            <Setter Property="adorners:AttachedAdorner.HasHoverAdorner"
                                    Value="True" />
                        </DataTrigger>-->
                        <DataTrigger Binding="{Binding DataType}"
                                     Value="{x:Type drawable:PathGuide}">
                            <Setter Property="Top"
                                    Value="{Binding Top,Mode=TwoWay}" />
                            <Setter Property="Left"
                                    Value="{Binding Left,Mode=TwoWay}" />
                            <Setter Property="IsSelectable"
                                    Value="False" />
                            <Setter Property="Cursor"
                                    Value="None" />
                            <Setter Property="IsDraggable"
                                    Value="False" />
                            <Setter Property="adorners:AttachedAdorner.HasHoverAdorner"
                                    Value="False" />
                            <Setter Property="adorners:AttachedAdorner.ShowResizeAdorner"
                                    Value="False" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding DataType}"
                                     Value="{x:Type drawable:ImageVisual}">
                            <Setter Property="adorners:AttachedAdorner.HasHoverAdorner"
                                    Value="False" />
                            <Setter Property="IsSelectable"
                                    Value="False" />
                            <Setter Property="IsDraggable"
                                    Value="False" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataType}"
                                     Value="{x:Type slaveDevices:ARGBLEDSlaveDevice}">
                            <Setter Property="adorners:AttachedAdorner.HasHoverAdorner"
                                    Value="False" />
                            <Setter Property="IsSelectable"
                                    Value="False" />
                            <Setter Property="IsDraggable"
                                    Value="False" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </richCanvas:RichItemsControl.ItemContainerStyle>
        </richCanvas:RichItemsControl>
        <Grid>

            <Grid HorizontalAlignment="Right"
                  VerticalAlignment="Top"
                  Margin="10">
                <ItemsControl ItemsSource="{Binding Canvas.AvailableTools}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <hc:TransitioningContentControl TransitionMode="Fade">
                                <Button Margin="10,0,0,0" Style="{DynamicResource _lowProfileDefaultButton}" CommandParameter="{Binding CommandParameter}"
                                        Command="{Binding DataContext.CanvasItemToolCommand,RelativeSource={RelativeSource AncestorType={x:Type local:DeviceCanvasView}}}">
                                    <TextBlock Text="{Binding Name}" />
                                </Button>
                            </hc:TransitioningContentControl>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>

        </Grid>
        <Grid HorizontalAlignment="Right"
              VerticalAlignment="Bottom">
            <local:LayerView>

            </local:LayerView>
        </Grid>
    </Grid>
</UserControl>
