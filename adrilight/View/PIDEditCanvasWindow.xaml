<hc:Window x:Class="adrilight.View.PIDEditCanvasWindow"
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
           xmlns:hc="https://handyorg.github.io/handycontrol"
           xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
           xmlns:converters="clr-namespace:adrilight.Converter" 
           xmlns:richCanvas="clr-namespace:RichCanvas;assembly=RichCanvas"
           mc:Ignorable="d"
           xmlns:behaviors="clr-namespace:adrilight.Helpers.Behaviors"
           xmlns:helpers="clr-namespace:adrilight.Helpers"
           xmlns:local ="clr-namespace:adrilight"
           xmlns:view="clr-namespace:adrilight.View"
           xmlns:spot ="clr-namespace:adrilight.Spots"
           xmlns:settings ="clr-namespace:adrilight.Settings"
           Background="{StaticResource MainContentBackgroundBrush}"
           x:Name="window"
           d:DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}"
           DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}" 
           
            ResizeMode="CanResize"
           Height="800" 
           Width="1000" 
           WindowStartupLocation="CenterOwner">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary
                    Source="ControlStyle.xaml">
                    <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
                    <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
                    <BooleanToVisibilityConverter x:Key="boolToVisibilityConvert" />
                    <converters:CommandToListConverter x:Key="CommandsToListConverter" />
                    <DropShadowEffect x:Key="Item.SelectedActive.Border.Shadow" BlurRadius="10"   RenderingBias ="Quality" ShadowDepth ="1" Color ="{Binding Color, Source={StaticResource PrimaryBrush}}"/>
                    <DropShadowEffect x:Key="Item.MouseOver.Border.Shadow" BlurRadius="10"   RenderingBias ="Quality" ShadowDepth ="1" Color ="{Binding Color, Source={StaticResource DarkMaskBrush}}"/>
                    <hc:Boolean2BooleanReConverter x:Key="booltoVreconv"/>
                    <GeometryDrawing x:Key="GridStyle"
                         Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z"
                         Brush="{DynamicResource SecondaryBorderBrush}" />
                </ResourceDictionary>

            </ResourceDictionary.MergedDictionaries>

        </ResourceDictionary>

    </Window.Resources>

    <Grid Margin="10,0,10,10">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
  
        <Grid Grid.Row="0">
            <!--<ToolBarTray VerticalAlignment="Center">
                <ToolBar Padding="6" Header="Live view">
                    <CheckBox IsChecked="{Binding IsRichCanvasWindowOpen}" Margin="10,0,0,0"/>
                    --><!--<Separator Margin="10,0,0,0"/>-->
                    <!--<Button Command="{Binding SetRandomOutputColorCommand}" ToolTip="Mỗi thiết bị sẽ được tô màu riêng biệt ngẫu nhiên" Content="Set Random Color" Margin="10,0,0,0"/>--><!--
                  
                </ToolBar>
          
            </ToolBarTray>-->
        </Grid>
        <Grid Grid.Row=" 1">
            <richCanvas:RichItemsControl
                 GridStyle="{StaticResource GridStyle}"
                EnableSnapping="True"
                GridSpacing="10"
                EnableGrid="true"
                Scrolling="OnScrolling"
                CanSelectMultipleItems="False"
                RealTimeDraggingEnabled="False"
                RealTimeSelectionEnabled="False"
                SelectedItems="{Binding selectedSpots}"
                Scale="0.5"
                ItemsSource="{Binding CurrentOutput.OutputLEDSetup.Spots}">


                <richCanvas:RichItemsControl.Resources>
                    <DataTemplate DataType="{x:Type spot:DeviceSpot}">
                        <Rectangle ToolTip="{Binding id}" Stroke="OrangeRed" StrokeThickness="{Binding BorderThickness}" Width="{Binding Rectangle.Width}" Height="{Binding Rectangle.Height}">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding OnDemandColor}"  />
                            </Rectangle.Fill>
                            <Rectangle.Style>
                                <Style TargetType="{x:Type Rectangle}">

                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Opacity"  Value="0.5"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown" >
                                    <i:InvokeCommandAction Command="{Binding DataContext.SetSpotActiveCommand,RelativeSource={RelativeSource AncestorType={x:Type view:PIDEditCanvasWindow}}}" CommandParameter="{Binding .}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Rectangle>
                    </DataTemplate>
                </richCanvas:RichItemsControl.Resources>
                <richCanvas:RichItemsControl.ItemContainerStyle>
                    <Style TargetType="richCanvas:RichItemContainer">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type richCanvas:RichItemContainer}">
                                    <Border x:Name="Bd" 
                                            Padding="0"
                                            SnapsToDevicePixels="True">
                                        <ContentPresenter 
                                            HorizontalAlignment="Center" 
                                            SnapsToDevicePixels="True" 
                                            VerticalAlignment="Center"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                                <Condition Property="IsSelected" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>-->
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryTextBrush}"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="False"/>
                                                <Condition Property="IsSelected" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>-->
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryBrush}"/>
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource PrimaryBrush}"/>
                                            <Setter Property="BorderThickness" TargetName="Bd" Value="1.0"/>
                                        </MultiTrigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="Tag"
                            Value="{Binding DataContext, ElementName=window}" />
                        <!--<Setter Property="helpers:AttachedAdorner.HasHoverAdorner"
                            Value="{Binding IsSelectable}" />-->
                        <!--<Setter Property="helpers:AttachedAdorner.ShowResizeAdorner"
                            Value="{Binding IsSelected}" />-->
                        <Setter Property="Top"
                            Value="{Binding Top}" />

                        <Setter Property="Left"
                            Value="{Binding Left}" />

                        <Setter Property="IsSelected"
                            Value="{Binding IsSelected, Mode=TwoWay}" />

                        <Setter Property="Width"
                            Value="{Binding Width}" />

                        <Setter Property="Height"
                            Value="{Binding Height}" />

                        <Setter Property="IsSelectable"
                            Value="{Binding IsSelectable}" />

                        <Setter Property="IsDraggable"
                            Value="{Binding IsDraggable}" />

                        <Setter Property="HasCustomBehavior"
                            Value="{Binding HasCustomBehavior}" />

                        <Setter Property="ShouldBringIntoView"
                            Value="{Binding ShouldBringIntoView, Mode=TwoWay}" />

                        <Setter Property="Scale"
                            Value="{Binding Scale, Mode=TwoWay}" />


                        <!--<Style.Triggers>
                            <Trigger Property="IsDraggable" Value="True">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                                            <MenuItem Header="Scale"
                                          Command="{Binding OpenRectangleScaleCommand}" CommandParameter="open" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource fullsize}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            --><!--<MenuItem Header="LED Setup"
                                          Command="{Binding LaunchPIDEditWindowCommand}" >
                                        <MenuItem.Icon>
                                            <Path Data="{StaticResource ledsetup}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                        </MenuItem.Icon>
                                    </MenuItem>--><!--
                                            <MenuItem Header="Aglign Left"
                                          Command="{Binding AglignSelectedItemstoLeftCommand}" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource left}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Aglign Top"
                                          Command="{Binding AglignSelectedItemstoTopCommand}" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource up}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Horizontal Distribute"
                                          Command="{Binding SpreadItemHorizontalCommand}" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource up}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Vertical Distribute"
                                          Command="{Binding SpreadItemVerticalCommand}" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource up}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Lock"
                                          Command="{Binding LockSelectedItemCommand}" CommandParameter="open" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource static}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Properties"
                                          Command="{Binding AddSelectedItemToGroupCommand}" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource info}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>

                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsDraggable" Value="False">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">

                                            <MenuItem Header="Unlock"
                                          Command="{Binding UnlockSelectedItemCommand}" CommandParameter="unlock" >
                                                <MenuItem.Icon>
                                                    <Path Data="{StaticResource breathing}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>-->
                    </Style>
                </richCanvas:RichItemsControl.ItemContainerStyle>
            </richCanvas:RichItemsControl>
        </Grid>
        <Grid Grid.Row="2" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <Button  Command="{Binding SaveCurretSurfaceLayoutCommand}" Margin="10" Style="{StaticResource ButtonPrimary}" Grid.Column="2" Content="Save"/>
            <Button Click="Button_Click" Background="Transparent" Margin="10" Style="{StaticResource ButtonPrimary}" Grid.Column="1" Content="Cancel"/>
        </Grid>
    </Grid>
</hc:Window>