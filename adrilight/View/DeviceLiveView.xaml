<UserControl x:Class="adrilight.View.DeviceLiveView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:local="clr-namespace:adrilight"
             xmlns:paz="clr-namespace:Wpf.Controls.PanAndZoom;assembly=Wpf.Controls.PanAndZoom"
             xmlns:converters="clr-namespace:adrilight.Converter"
             xmlns:helpers="clr-namespace:adrilight.Helpers"
             xmlns:settings="clr-namespace:adrilight.Settings"
             xmlns:view="clr-namespace:adrilight.View"
             xmlns:viewmodel="clr-namespace:adrilight.ViewModel"
             xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
             xmlns:richCanvas="clr-namespace:RichCanvas;assembly=RichCanvas"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             mc:Ignorable="d"
             x:Name="window"
             d:DataContext="{d:DesignInstance Type=viewmodel:MainViewViewModel}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary
                    Source="ControlStyle.xaml">
                    <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
                    <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
                    <BooleanToVisibilityConverter x:Key="boolToVisibilityConvert" />
                    <converters:CommandToListConverter x:Key="CommandsToListConverter" />
                    <converters:StaticResourceConverter x:Key="staticResourceConverter" />
                    <DropShadowEffect x:Key="Item.SelectedActive.Border.Shadow" BlurRadius="10"   RenderingBias ="Quality" ShadowDepth ="1" Color ="{Binding Color, Source={StaticResource PrimaryBrush}}" />
                    <DropShadowEffect x:Key="Item.MouseOver.Border.Shadow" BlurRadius="10"   RenderingBias ="Quality" ShadowDepth ="1" Color ="{Binding Color, Source={StaticResource DarkMaskBrush}}" />
                    <hc:Boolean2BooleanReConverter x:Key="booltoVreconv" />
                    <GeometryDrawing x:Key="GridStyle"
                         Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z"
                         Brush="{DynamicResource SecondaryBorderBrush}" />
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <!--<paz:ZoomBorder Name="ContainerZoomBorder"
                            Stretch="None"
                            ClipToBounds="True"
                            Focusable="True"
                             PanButton="Right"
                            VerticalAlignment="Stretch"
                            HorizontalAlignment="Stretch">
            <Grid Background="Transparent">
                <ItemsControl ClipToBounds="False" ItemsSource="{Binding LiveViewItems}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas>
                                <Canvas.CacheMode>
                                    <BitmapCache EnableClearType="False" RenderAtScale="2" SnapsToDevicePixels="False"/>
                                </Canvas.CacheMode>
                            </Canvas>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.Resources>
                        <DataTemplate DataType="{x:Type local:LEDSetup}">
                            <view:ZoneVisualizer RenderOptions.BitmapScalingMode="LowQuality" Width="{Binding Width}" Height="{Binding Height}" Zone="{Binding}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                        <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </view:ZoneVisualizer>
                        </DataTemplate>
                    </ItemsControl.Resources>
                    <ItemsControl.ItemContainerStyle>
                        <Style>
                            <Setter Property="Canvas.Left" Value="{Binding GetRect.Left}"/>
                            <Setter Property="Canvas.Top" Value="{Binding GetRect.Top}"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                </ItemsControl>
            </Grid>
        </paz:ZoomBorder>-->
        <richCanvas:RichItemsControl
                x:Name="liveViewCanvas"
                ItemsSource="{Binding LiveViewItems}"
                GridStyle="{StaticResource GridStyle}"
                EnableSnapping="False"
                MinScale="0.1"
                MaxScale="100"
                GridSpacing="24"
                DisableCache="true"
                EnableGrid="False"
                Scrolling="OnScrolling"
                CanSelectMultipleItems="{Binding IsInIDEditStage,Converter={StaticResource Boolean2BooleanReConverter}}"
                RealTimeDraggingEnabled="False"
                RealTimeSelectionEnabled="False"
                DisableAutoPanning="True"
                Background="Transparent"
                DisableScroll="True"
                UseLayoutRounding="False"
                ZoomKey="LeftCtrl"
                TranslateOffset="{Binding CurrentLiveViewOffset,Mode=TwoWay}"
                Scale="{Binding CanvasScale,Mode=TwoWay}"
                MousePosition="{Binding MousePosition, Mode=OneWayToSource}">
            <richCanvas:RichItemsControl.CacheMode>
                <BitmapCache EnableClearType="False" RenderAtScale="1.0" SnapsToDevicePixels="False"/>
            </richCanvas:RichItemsControl.CacheMode>
            <richCanvas:RichItemsControl.SelectionRectangleStyle>
                <Style TargetType="Rectangle">
                    <Setter Property="Fill" Value="Transparent" />
                    <Setter Property="Stroke" Value="{DynamicResource PrimaryBrush}" />
                    <Setter Property="StrokeDashArray" Value="2" />
                    <Setter Property="StrokeThickness" Value="{Binding DataContext.SelectionRectangleStrokeThickness,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding DataContext.IsInIDEditStage,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" Value="True">
                            <Setter Property="Opacity" Value="0.1" />
                            <Setter Property="Fill" Value="Transparent" />
                            <Setter Property="Stroke" Value="Transparent" />
                            <Setter Property="StrokeThickness" Value="3" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </richCanvas:RichItemsControl.SelectionRectangleStyle>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding DataContext.UnselectAllLiveiewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="unselect" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding DataContext.LiveViewMouseButtonUpCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="mouseup" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <richCanvas:RichItemsControl.Resources>
                <DataTemplate DataType="{x:Type settings:ARGBLEDSlaveDevice}">
                    <Canvas IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{Binding Width,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" 
                                                Height="{Binding Height, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                        <Grid>
                            <Image RenderTransformOrigin="0.5,0.5" Stretch="Uniform" Source="{Binding Thumbnail}" Canvas.Left="{Binding Image.Left}" Canvas.Top="{Binding Image.Top}" Height="{Binding Image.Height}" RenderOptions.BitmapScalingMode="HighQuality" Width="{Binding Image.Width}">
                                <Image.LayoutTransform>
                                    <RotateTransform Angle="{Binding Image.Angle,Mode=TwoWay}"/>
                                </Image.LayoutTransform>
                            </Image>
                        </Grid>

                    </Canvas>
                </DataTemplate>
                <DataTemplate DataType="{x:Type local:LEDSetup}">
                    <Grid>
                        <view:ZoneVisualizer Width="{Binding Width}" Height="{Binding Height}" Zone="{Binding}" RenderOptions.BitmapScalingMode="Linear">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </view:ZoneVisualizer>
                        <Grid>
                            <Viewbox>
                                <TextBlock Margin="20" Text="{Binding ZoneWarningText}" Style="{DynamicResource TextBlockDefaultWarning}"/>
                            </Viewbox>
                        </Grid>
        <!--<ItemsControl ToolTip="{Binding Name}" Margin="0,0,0,0"
                                    Name="PreviewGird"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ItemsSource="{Binding Spots,Mode=TwoWay}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                Name="PreviewCanvas"
                                                Margin="0"
                                                Width="{Binding Width,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                                                Height="{Binding Height, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </Canvas>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemContainerStyle>
                                    <Style TargetType="ContentPresenter">
                                        <Setter Property="Canvas.Left" Value="{Binding Left}" />
                                        <Setter Property="Canvas.Top" Value="{Binding Top}" />
                                    </Style>
                                </ItemsControl.ItemContainerStyle>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <view:LEDVisualizer Spot="{Binding}" />

                                            -->
        <!--<Path RenderTransformOrigin="0.5,0.5" Data="{Binding Geometry}"
                                                Stretch="Fill"
                                                StrokeThickness="{Binding DataContext.SelectionRectangleStrokeThickness,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}"
                                                Width="{Binding Width,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                                Height="{Binding Height,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                                                <Path.Stroke>
                                                    <SolidColorBrush Color="{Binding OnDemandColor}" />
                                                </Path.Stroke>
                                                <Path.Fill>
                                                    <SolidColorBrush Color="{Binding OnDemandColor}" Opacity="0.5" />
                                                </Path.Fill>
                                                <Path.Style>
                                                    <Style TargetType="{x:Type Path}">
                                                        <Style.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Opacity"  Value="0.5" />
                                                            </Trigger>
                                                        </Style.Triggers>
                                                        <Setter Property="RenderTransform">
                                                            <Setter.Value>
                                                                <TransformGroup>
                                                                    <ScaleTransform />
                                                                    <TranslateTransform />
                                                                    <RotateTransform />
                                                                </TransformGroup>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Path.Style>
                                            </Path>-->
        <!--
                                            <Viewbox RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
                                                <Viewbox.Style>
                                                    <Style TargetType="{x:Type Viewbox}">
                                                        <Setter Property="RenderTransform">
                                                            <Setter.Value>
                                                                <TransformGroup>
                                                                    <ScaleTransform />
                                                                    <TranslateTransform />
                                                                    <RotateTransform />
                                                                </TransformGroup>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="Visibility" Value="Collapsed">
                                                        </Setter>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding ="{Binding DataContext.IsInIDEditStage,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Viewbox.Style>
                                                <TextBlock Margin="5" Padding="0" Foreground="White">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockDefault}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding ="{Binding DataContext.IdEditMode,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" Value="0">
                                                                    <Setter Property="Text" Value="{Binding VID}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding ="{Binding DataContext.IdEditMode,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" Value="1">
                                                                    <Setter Property="Text" Value="{Binding MID}" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                            </Viewbox>
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>-->
        
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:PathGuide}">
                    <Grid>
                        <Path Data="{Binding Geometry,Converter={converters:StaticResourceConverter}}"
                              Stretch="Fill"
                              Fill="{Binding VisualProperties.FillColor,Converter={StaticResource ColorToBrushConverter}}"
                              Opacity="0.25"
                              Width="{Binding Width}"
                              Height="{Binding Height}">
                        </Path>
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:FanMotor}">
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Viewbox>
                            <Border Margin="10" HorizontalAlignment="Center" VerticalAlignment="Center" CornerRadius="7" Background="{DynamicResource MainContentBackgroundBrush}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Border Width="40" Height="40" HorizontalAlignment="Left" Margin="5" CornerRadius="4" Background="{DynamicResource SecondaryRegionBrush}">
                                        <Path Margin="5"  Data="{DynamicResource Fan}" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform" />
                                    </Border>
                                    <Grid Grid.Row="1">
                                        <StackPanel>
                                            <TextBlock Margin="5,0,0,0" Text="{Binding Name}" />
                                            <TextBlock Margin="5,5,0,0" Text="{Binding CurrentPWMValue}" />
                                            <Viewbox>

                                                <Grid>
                                                    <Grid.Resources>
                                                        <Style TargetType="lvc:LineSeries">
                                                            <Setter Property="StrokeThickness" Value="2"></Setter>
                                                            <Setter Property="Stroke" Value="{DynamicResource PrimaryBrush}"></Setter>
                                                            <Setter Property="Fill">
                                                                <Setter.Value>
                                                                    <SolidColorBrush Color ="{Binding Color, Source={StaticResource PrimaryBrush}}" Opacity="0.1" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="PointGeometrySize" Value="0"></Setter>
                                                            <Setter Property="LineSmoothness" Value="0"></Setter>
                                                        </Style>
                                                        <Style TargetType="lvc:Axis">
                                                            <Setter Property="ShowLabels" Value="False"></Setter>
                                                            <Setter Property="IsEnabled" Value="False"></Setter>
                                                        </Style>
                                                    </Grid.Resources>
                                                    <lvc:CartesianChart HorizontalAlignment="Right" VerticalAlignment="Center" Width="200" Height="auto" Margin="1,0,5,0"   Hoverable="True" DataTooltip="{x:Null}">
                                                        <lvc:CartesianChart.Series>
                                                            <lvc:LineSeries Values="{Binding LineValues}">
                                                            </lvc:LineSeries>
                                                        </lvc:CartesianChart.Series>
                                                        <lvc:CartesianChart.AxisX>
                                                            
        <!--a small visual improvement, lets hide the first points (x = 0, x=1) to get better animations-->
        
                                                            <lvc:Axis MinValue="2"></lvc:Axis>
                                                        </lvc:CartesianChart.AxisX>
                                                    </lvc:CartesianChart>
                                                </Grid>
                                            </Viewbox>
                                        </StackPanel>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Viewbox>
                        <Rectangle Width="{Binding Width}" Height="{Binding Height}" Fill="Transparent">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Rectangle>
                    </Grid>
                </DataTemplate>
                <DataTemplate x:Key="SelectedAdornerTemplate">
                    <Border BorderBrush="{DynamicResource PrimaryBrush}"
                            BorderThickness="1" CornerRadius="0"
                            Background="{DynamicResource PrimaryBrush}">
                        <TextBlock Foreground="White"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   MaxWidth="60">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0} : {1}">
                                    <Binding Path="Left" />
                                    <Binding Path="Top" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </Border>
                </DataTemplate>

                <DataTemplate x:Key="HoverAdornerTemplate">
                    <Grid>
                        <Border BorderBrush="{DynamicResource PrimaryBrush}"
                             BorderThickness="1">
                        </Border>
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:Border}">
                    <Grid Tag="{Binding DataContext, ElementName=window}">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="IsHitTestVisible" Value="True" />
                                <Style.Triggers>
                                    <DataTrigger Binding ="{Binding Path=DataContext.IsInIDEditStage,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" Value="True">
                                        <Setter Property="IsHitTestVisible" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                <i:InvokeCommandAction Command="{Binding DataContext.SelectLiveViewItemCommand,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" CommandParameter="{Binding .}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Rectangle Stroke="{DynamicResource SecondaryBorderBrush}"
                                   Width="{Binding Width,Mode=TwoWay}"
                                   Height="{Binding Height,Mode=TwoWay}"
                                   StrokeDashArray="2"
                                   StrokeThickness="{Binding DataContext.SelectionRectangleStrokeThickness,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}"
                                   Fill="Transparent">
                        </Rectangle>
                        <Border MaxWidth="20" MaxHeight="20" HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource PrimaryBrush}">
                            <Viewbox>
                                <TextBlock Margin="5" Style="{DynamicResource TextBlockDefault}" HorizontalAlignment="Left" VerticalAlignment="Top" Text="{Binding Name}" />
                            </Viewbox>
                        </Border>
                    </Grid>
                </DataTemplate>
                <DataTemplate DataType="{x:Type settings:ScreenBound}">
                    <Grid>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Margin="20,10,5,5" HorizontalAlignment="Left" VerticalAlignment="Top" Text="Screen" Style="{DynamicResource TextBlockLarge}" />
                            <TextBlock Margin="5,10" HorizontalAlignment="Left" VerticalAlignment="Top" Text="at" Style="{DynamicResource TextBlockLarge}" />
                            <TextBlock Margin="5,10" HorizontalAlignment="Left" VerticalAlignment="Top"  Style="{DynamicResource TextBlockLarge}">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0} x {1}">
                                        <Binding Path="Width" />
                                        <Binding Path="Height" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </StackPanel>

                        <Rectangle Stroke="{DynamicResource SecondaryBorderBrush}"
                                   Width="{Binding Width}"
                                   Height="{Binding Height}"
                               StrokeThickness="5"
                               Fill="Transparent"
                               StrokeDashArray="2"
                               IsHitTestVisible="{Binding IsSelectable}">
                        </Rectangle>
                    </Grid>
                </DataTemplate>
            </richCanvas:RichItemsControl.Resources>

            <richCanvas:RichItemsControl.ItemContainerStyle>
                <Style TargetType="richCanvas:RichItemContainer">
                    <Setter Property="helpers:EventToCommand.Event"
                            Value="LeftChanged, TopChanged" />
                    <Setter Property="helpers:EventToCommand.Command">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource CommandsToListConverter}">
                                <Binding Path="LeftChangedCommand" />
                                <Binding Path="TopChangedCommand" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                    <Setter Property="helpers:EventToCommand.CanExecute"
                            Value="{Binding IsSelected}" />
                    <Setter Property="Tag"
                            Value="{Binding DataContext, ElementName=window}" />
                    <Setter Property="helpers:AttachedAdorner.HasHoverAdorner"
                            Value="{Binding IsSelectable}" />
                    <Setter Property="helpers:AttachedAdorner.ShowResizeAdorner"
                            Value="{Binding IsSelected}" />
                    <Setter Property="Top"
                            Value="{Binding GetRect.Top}" />

                    <Setter Property="Left"
                            Value="{Binding GetRect.Left}" />

                    <Setter Property="IsSelected"
                            Value="{Binding IsSelected, Mode=TwoWay}" />

                    <Setter Property="Width"
                            Value="{Binding Width, Mode=TwoWay}" />

                    <Setter Property="Height"
                            Value="{Binding Height, Mode=TwoWay}" />

                    <Setter Property="IsSelectable"
                            Value="{Binding IsSelectable}" />

                    <Setter Property="IsDraggable"
                            Value="False" />

                    <Setter Property="HasCustomBehavior"
                            Value="{Binding HasCustomBehavior}" />

                    <Setter Property="ShouldBringIntoView"
                            Value="False" />

                    <Setter Property="Scale"
                            Value="{Binding Scale, Mode=TwoWay}" />
                    <Setter Property="Cursor"
                            Value="Arrow" />
                    <Style.Triggers>
                        <DataTrigger Binding ="{Binding Path=DataContext.IsInIDEditStage,RelativeSource={RelativeSource AncestorType={x:Type view:DeviceLiveView}}}" Value="True">
                            <Setter Property="IsSelectable" Value="True" />
                            <Setter Property="helpers:AttachedAdorner.HasHoverAdorner" Value="True" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataType}" Value="{x:Type settings:PathGuide}">
                            <Setter Property="Top"
                            Value="{Binding Top,Mode=TwoWay}" />
                            <Setter Property="Left"
                            Value="{Binding Left,Mode=TwoWay}" />
                            <Setter Property="IsSelectable"
                            Value="False" />
                            <Setter Property="Cursor"
                            Value="None" />
                            <Setter Property="IsDraggable"
                            Value="False" />
                            <Setter Property="helpers:AttachedAdorner.HasHoverAdorner"
                            Value="False" />
                            <Setter Property="helpers:AttachedAdorner.ShowResizeAdorner"
                            Value="False" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding DataType}" Value="{x:Type settings:ImageVisual}">
                            <Setter Property="helpers:AttachedAdorner.HasHoverAdorner"
                            Value="False" />
                            <Setter Property="IsSelectable"
                            Value="False" />
                            <Setter Property="IsDraggable"
                            Value="False" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </richCanvas:RichItemsControl.ItemContainerStyle>
        </richCanvas:RichItemsControl>
        <!--<Grid>
            <Border Effect="{DynamicResource EffectShadow1}" VerticalAlignment="Top" CornerRadius="4" Margin="10,0" HorizontalAlignment="Left" Background="{DynamicResource MainContentBackgroundBrush}">
                <Grid>
                    <CheckBox ToolTip="Bỏ tick mục này nếu máy ăn CPU khi dùng App" Margin="10" Content="Real-time update" IsChecked="False" />
                </Grid>
            </Border>
        </Grid>-->
        <Grid>
            <hc:TransitioningContentControl>
                <StackPanel HorizontalAlignment="Right" VerticalAlignment="Top" Orientation="Horizontal">
                    <Grid>
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowSelectedItemToolbar,Mode=TwoWay}" Value="True">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>

                        <Border Effect="{DynamicResource EffectShadow2}" VerticalAlignment="Top" CornerRadius="7" Margin="10,0" HorizontalAlignment="Right" Background="{DynamicResource MainContentBackgroundBrush}">
                            <StackPanel Orientation="Horizontal">
                                <Grid>
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsInIsolateMode,Mode=TwoWay}" Value="True">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                    <hc:TransitioningContentControl>

                                        <Button Style="{DynamicResource _lowProfileDefaultButton}" Margin="5" ToolTip="Hiển thị độc lập đối tượng được chọn" Command="{Binding IsolateSelectedItemsCommand}" CommandParameter="isolate" Content="Isolate" />
                                    </hc:TransitioningContentControl>
                                </Grid>
                                <Grid>
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding CanGroup,Mode=TwoWay}" Value="True" />
                                                        <Condition Binding="{Binding IsInIDEditStage,Mode=TwoWay}" Value="False" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                    <hc:TransitioningContentControl>

                                        <Button Style="{DynamicResource _lowProfileDefaultButton}" Margin="5" ToolTip="Nhóm các đối tượng được chọn" Command="{Binding GroupSelectedZoneForMaskedControlCommand}" CommandParameter="group" Content="Group">
                                        </Button>
                                    </hc:TransitioningContentControl>
                                </Grid>
                                <Grid>
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding CanUnGroup,Mode=TwoWay}" Value="True" />
                                                        <Condition Binding="{Binding IsInIDEditStage,Mode=TwoWay}" Value="False" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                    <hc:TransitioningContentControl>
                                        <Button Style="{DynamicResource _lowProfileDefaultButton}" Margin="5" ToolTip="Bỏ nhóm các đối tượng được chọn"  Command="{Binding UnGroupZoneCommand}" CommandParameter="group" Content="Ungroup">
                                        </Button>
                                    </hc:TransitioningContentControl>
                                </Grid>
                            </StackPanel>
                        </Border>
                    </Grid>
                    <Grid  Visibility="{Binding IsInIsolateMode,Mode=TwoWay,Converter={StaticResource Boolean2VisibilityConverter}}">
                        <hc:TransitioningContentControl>
                            <Border  Margin="10,0,10,0" HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource MainContentBackgroundBrush}" CornerRadius="4">
                                <Button Content="Show all" Style="{DynamicResource _lowProfileDefaultButton}" ToolTip="Quay trở lại"
                            Command="{Binding ExitIsolateModeCommand}"
                            Margin="5"
                            VerticalAlignment="Top"
                            HorizontalAlignment="Left" />
                            </Border>
                        </hc:TransitioningContentControl>
                    </Grid>
                </StackPanel>
            </hc:TransitioningContentControl>
        </Grid>
        <StackPanel Orientation="Horizontal">
            <Grid>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsInIDEditStage,Mode=TwoWay}" Value="True" />
                                    <Condition Binding="{Binding IdEditMode,Mode=TwoWay}" Value="0" />
                                    <Condition Binding="{Binding SelectedToolIndex,Mode=TwoWay}" Value="1" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Visible" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsInIDEditStage,Mode=TwoWay}" Value="True" />
                                    <Condition Binding="{Binding IdEditMode,Mode=TwoWay}" Value="0" />
                                    <Condition Binding="{Binding SelectedToolIndex,Mode=TwoWay}" Value="2" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Visible" />
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <hc:TransitioningContentControl TransitionMode="Left2Right">
                    <Border Effect="{DynamicResource EffectShadow3}"  Margin="0,0,10,10"  HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource MainContentBackgroundBrush}" CornerRadius="4">
                        <StackPanel>
                            <Grid ToolTip="Brush size">
                                <StackPanel>
                                    <Grid>
                                        <GroupBox Margin="10"   HorizontalContentAlignment="Left"  Style="{StaticResource GroupBoxOriginal}"  hc:TitleElement.TitlePlacement="Left">
                                            <GroupBox.HeaderTemplate>
                                                <DataTemplate>
                                                    <StackPanel>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="auto" />
                                                                <ColumnDefinition Width="*" />
                                                            </Grid.ColumnDefinitions>

                                                            <TextBlock HorizontalAlignment="Left"  FontWeight="SemiBold" Text="BRUSH SIZE" />
                                                            <Button ToolTip="Tìm hiểu thêm" Grid.Column="1" HorizontalAlignment="Left"  Background="Transparent" Margin="10,0,0,0" hc:IconElement.Geometry="{DynamicResource infoCircle}" Style="{DynamicResource _defaultIconButtonSmall}" />
                                                        </Grid>
                                                        <TextBlock Margin="0,5,0,0" TextWrapping="Wrap"  HorizontalAlignment="Left" Style="{StaticResource TextBlockDefaultSecLight}" Grid.Row="1" Text="Chỉnh kích thước bút vẽ" />
                                                    </StackPanel>
                                                </DataTemplate>
                                            </GroupBox.HeaderTemplate>

                                            <hc:PreviewSlider Value="{Binding BrushSize,Mode=TwoWay}" HorizontalAlignment="Right" Width="200" Minimum="20" Maximum="1000">
                                                <hc:PreviewSlider.PreviewContent>
                                                    <Label Style="{StaticResource LabelPrimary}" Content="{Binding Path=(hc:PreviewSlider.PreviewPosition),RelativeSource={RelativeSource Self}}" ContentStringFormat="#0" />
                                                </hc:PreviewSlider.PreviewContent>
                                            </hc:PreviewSlider>
                                        </GroupBox>
                                    </Grid>
                                    <hc:Divider Margin="0"  LineStroke="{DynamicResource RegionBrush}">
                                    </hc:Divider>
                                    <Grid>
                                        <GroupBox Margin="10"  HorizontalContentAlignment="Left"  Style="{DynamicResource GroupBoxOriginal}"  hc:TitleElement.TitlePlacement="Left">
                                            <GroupBox.HeaderTemplate>
                                                <DataTemplate>
                                                    <StackPanel>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="auto" />
                                                                <ColumnDefinition Width="*" />
                                                            </Grid.ColumnDefinitions>

                                                            <TextBlock HorizontalAlignment="Left"  FontWeight="SemiBold" Text="BRUSH INTENSITY" />
                                                            <Button ToolTip="Tìm hiểu thêm" Grid.Column="1" HorizontalAlignment="Left"  Background="Transparent" Margin="10,0,0,0" hc:IconElement.Geometry="{DynamicResource infoCircle}" Style="{DynamicResource _defaultIconButtonSmall}" />
                                                        </Grid>

                                                        <TextBlock Margin="0,5,0,0" TextWrapping="Wrap"  HorizontalAlignment="Left" Style="{StaticResource TextBlockDefaultSecLight}" Grid.Row="1" Text="Giá trị càng cao, màu trong palette càng dày đặc" />
                                                    </StackPanel>
                                                </DataTemplate>
                                            </GroupBox.HeaderTemplate>

                                            <hc:NumericUpDown VerticalAlignment="Center" HorizontalAlignment="Right" Minimum="1" Maximum="100" Value="{Binding BrushIntensity, Mode=TwoWay}">
                                            </hc:NumericUpDown>
                                        </GroupBox>
                                    </Grid>
                                </StackPanel>
                            </Grid>
                        </StackPanel>
                    </Border>
                </hc:TransitioningContentControl>
            </Grid>
        </StackPanel>
        <Grid>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsInIsolateMode,Mode=TwoWay}" Value="False" />
                                <Condition Binding="{Binding IsInIDEditStage,Mode=TwoWay}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        </Grid>
    </Grid>
</UserControl>