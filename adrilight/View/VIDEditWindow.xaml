<hc:Window x:Class="adrilight.View.VIDEditWindow"
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
           xmlns:hc="https://handyorg.github.io/handycontrol"
           xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
           xmlns:converters="clr-namespace:adrilight.Converter"
           mc:Ignorable="d"
           xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
           xmlns:local="clr-namespace:adrilight.View"
           Background="{DynamicResource MainContentBackgroundBrush}"
           d:DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}"
           DataContext="{Binding Source={StaticResource Locator}, Path=MainViewViewModel}" 
           Closing="PIDEditWindowClosed"
           Title="Edit LEDs VID" 
           Height="540" 
           Width="1000" 
           WindowState="Maximized"
           WindowStartupLocation="CenterOwner" 
           >

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary
                    Source="ControlStyle.xaml">
                    <converters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
                    <converters:BrushToHexConverter x:Key="BrushToHexConverter" />
                    <BooleanToVisibilityConverter x:Key="boolToVisibilityConvert" />
                </ResourceDictionary>

            </ResourceDictionary.MergedDictionaries>
            <!--<Style x:Key="_ListBoxItemStyle" TargetType="ListBoxItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                            <Border CornerRadius="4" Name="_Border"
                                Padding="0"
                                Margin="0"
                                Background="Transparent"   
                                BorderBrush="Transparent"
                                BorderThickness="3"
                                SnapsToDevicePixels="true">
                                <ContentPresenter />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="true">

                                    <Setter TargetName="_Border" Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                -->
            <!--<Setter Property="ToolTip" Value="{Binding DocName}"/>-->
            <!--
                <Setter Property="Tag" Value="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType=ListBox}}" />
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu Style="{DynamicResource ContextMenuBaseStyle}">
                            <MenuItem Style="{DynamicResource MenuItemBaseStyle}" Header="Edit"
                                          Command="{Binding PlacementTarget.Tag.EditSelectedPaletteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                          >
                            </MenuItem>
                            <MenuItem Style="{DynamicResource MenuItemBaseStyle}" Header="Share"
                                          Command="{Binding PlacementTarget.Tag.ExportCurrentSelectedPaletteToFileCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                          >
                            </MenuItem>
                            <MenuItem Style="{DynamicResource MenuItemBaseStyle}" Header="Delete"
                                          Command="{Binding PlacementTarget.Tag.DeleteSelectedPaletteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                          >
                            </MenuItem>
                        </ContextMenu>

                    </Setter.Value>
                </Setter>
            </Style>-->
        </ResourceDictionary>
    </Window.Resources>

    <Grid ClipToBounds="true">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Column="1" Grid.Row=" 2">
            <StackPanel Orientation="Horizontal" Margin="10" HorizontalAlignment="right">

                <Button Click="Canceled" Command="{Binding CancelEditWizardCommand}" CommandParameter="cancel"  Margin="10"  Content="Cancel" Background="Transparent" BorderBrush="Transparent">
                    <Button.Style>
                        <Style BasedOn="{StaticResource ButtonDefault}" TargetType="Button">
                            <Setter Property="Visibility" Value="Visible"></Setter>

                        </Style>
                    </Button.Style>
                </Button>

                <Button Command="{Binding SaveNewUserEditLEDSetup}" CommandParameter="save"  Click="Confirmed" Margin="10"  Content="Done" >
                    <Button.Style>
                        <Style BasedOn="{StaticResource ButtonPrimary}" TargetType="Button">
                            <Setter Property="Visibility" Value="Visible"></Setter>

                        </Style>
                    </Button.Style>
                </Button>


            </StackPanel>
        </Grid>
        <Grid  Margin="20,0,0,0" Grid.Row="1" Grid.Column="0">
            <!--<Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="0">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>-->

            <StackPanel>
                
                <Button hc:IconElement.Geometry="{StaticResource fullspectrum}" Margin="15" HorizontalAlignment="Stretch"  Command="{Binding ResetCountCommand}"  Style="{DynamicResource ButtonDefault}" Content="Reset" CommandParameter="ResetVID"/>
                <hc:NumericUpDown Value="{Binding CountVID}" Style="{DynamicResource NumericUpDownExtend}" hc:InfoElement.Title="Bắt đầu" Minimum="0" Maximum="1023" Margin="15,0,15,15">

                </hc:NumericUpDown >
                <hc:NumericUpDown Value="{Binding GapVID}" Style="{DynamicResource NumericUpDownExtend}" hc:InfoElement.Title="Gap" Minimum="0" Maximum="1023" Margin="15,0,15,15">

                </hc:NumericUpDown >

                <Button Visibility="{Binding CurrentDevice.IsUnionMode,Converter={StaticResource Boolean2VisibilityReConverter}}" hc:IconElement.Geometry="{DynamicResource export}" Margin="15" HorizontalAlignment="Stretch"  Command="{Binding OpenExportNewColorEffectCommand}"  Style="{DynamicResource ButtonDefault}" Content="Export" CommandParameter="ExportVID"/>
                <Button Visibility="{Binding CurrentDevice.IsUnionMode,Converter={StaticResource Boolean2VisibilityReConverter}}" hc:IconElement.Geometry="{DynamicResource import}" Margin="15" HorizontalAlignment="Stretch"  Command="{Binding ImportEffectCommand}"  Style="{DynamicResource ButtonDefault}" Content="Import" CommandParameter="ExportVID"/>
                <!--<hc:Badge Status="Processing" Height="30" Margin="15" Style="{DynamicResource BadgeDanger}">
                
                    <Button hc:IconElement.Geometry="{StaticResource number}" Click="Button_Click"   Style="{DynamicResource ButtonDefault}" Content="Set ID" CommandParameter="Reset"/>
                </hc:Badge>-->
                
               

                <ToggleButton Visibility="Collapsed" IsChecked="False" x:Name="enabledrag" Style="{DynamicResource ToggleButtonSwitch}"/>

            </StackPanel>



        </Grid>
        <Grid MouseDown="Window_MouseDown" MouseUp="Window_MouseUp" MouseMove="Window_MouseMove" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center"  ClipToBounds="true" Grid.Row="1" x:Name="MotherGrid">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Visible"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CurrentDevice.IsUnionMode}" Value="true">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <!--<Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=WizardStep,Path=StepIndex}" Value="0">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>-->
            <Viewbox Cursor="Pen" Name="PreviewBox">
                <ItemsControl Name="PreviewGird"  ItemsSource="{Binding CurrentDevice.AvailableOutputs}">

                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas  HorizontalAlignment="Left" VerticalAlignment="Top"
                               
                              
                                 Width="{Binding CurrentDevice.DeviceBoundRectangle.Width,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" 
                                Height="{Binding CurrentDevice.DeviceBoundRectangle.Height, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" >

                            </Canvas>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left" Value="{Binding PreviewRectangle.Left}"/>
                            <Setter Property="Canvas.Top" Value="{Binding PreviewRectangle.Top}"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Viewbox    HorizontalAlignment="Left" VerticalAlignment="Center"  >
                                <ItemsControl 
                          
                          BorderThickness="1"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center" 
                          ItemsSource="{Binding OutputLEDSetup.Spots}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Canvas  HorizontalAlignment="Left" VerticalAlignment="Top" Name="PreviewCanvas"
                               
                                Margin="0" 
                                Width="{Binding OutputRectangle.Width}" 
                                Height="{Binding OutputRectangle.Height}" >

                                            </Canvas>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemContainerStyle>
                                        <Style TargetType="ContentPresenter">
                                            <Setter Property="Canvas.Left" Value="{Binding Rectangle.X}"/>
                                            <Setter Property="Canvas.Top" Value="{Binding Rectangle.Y}"/>
                                        </Style>
                                    </ItemsControl.ItemContainerStyle>

                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Border Width="{Binding Rectangle.Width}" Height="{Binding Rectangle.Height}">

                                                <Grid>



                                                    <Viewbox>


                                                        <Rectangle Width="{Binding Rectangle.Width}" Height="{Binding Rectangle.Height}" ToolTip="{Binding id}" Stroke="{DynamicResource PrimaryBrush}" StrokeThickness="{Binding BorderThickness}" >
                                                            <Rectangle.Fill>
                                                                <SolidColorBrush Color="{Binding OnDemandColor}"  />
                                                            </Rectangle.Fill>
                                                            <Rectangle.Style>
                                                                <Style TargetType="{x:Type Rectangle}">

                                                                    <Style.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter Property="Opacity"  Value="0.5"/>
                                                                        </Trigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Rectangle.Style>
                                                            <i:Interaction.Triggers>
                                                                <i:EventTrigger EventName="MouseEnter" >
                                                                    <i:InvokeCommandAction Command="{Binding DataContext.SetSpotVIDCommand,RelativeSource={RelativeSource AncestorType={x:Type local:VIDEditWindow}}}" CommandParameter="{Binding .}" />
                                                                </i:EventTrigger>
                                                            </i:Interaction.Triggers>

                                                        </Rectangle>
                                                    </Viewbox>

                                                    <Viewbox Margin="0">
                                                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                                            <TextBlock Margin="1" Padding="1"  HorizontalAlignment="Center" VerticalAlignment="Center"  Text="{Binding VID}"  IsHitTestVisible="False">
                                                        
                                                            </TextBlock>
                                                        </Grid>

                                                    </Viewbox>



                                                </Grid>
                                            </Border>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </Viewbox>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Viewbox>

            <Canvas
                x:Name="dragSelectionCanvas"
                Visibility="Collapsed">
                <Border  x:Name="dragSelectionBorder"
                     BorderBrush="Blue"
                     BorderThickness="2"
                     Background="LightBlue"
                     CornerRadius="1"
                     Opacity="0.5"/>
            </Canvas>
        </Grid>
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Grid.Column="1">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CurrentDevice.IsUnionMode}" Value="true">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        
                <Viewbox    HorizontalAlignment="Center" VerticalAlignment="Center"  >
          
                    <ItemsControl
                          
                          BorderThickness="1"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center" 
                          ItemsSource="{Binding CurrentOutput.OutputLEDSetup.Spots}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas  HorizontalAlignment="Center" VerticalAlignment="Top" Name="PreviewCanvas"
                               
                                Margin="0" 
                                   Width="{Binding CurrentDevice.UnionOutput.OutputRectangle.Width,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" 
                                Height="{Binding CurrentDevice.UnionOutput.OutputRectangle.Height, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" >
                                </Canvas>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Canvas.Left" Value="{Binding Rectangle.X}"/>
                                <Setter Property="Canvas.Top" Value="{Binding Rectangle.Y}"/>
                            </Style>
                        </ItemsControl.ItemContainerStyle>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border Width="{Binding Rectangle.Width}" Height="{Binding Rectangle.Height}">

                                    <Grid>



                                        <Viewbox>


                                            <Rectangle Width="{Binding Rectangle.Width}" Height="{Binding Rectangle.Height}" ToolTip="{Binding id}" Stroke="{DynamicResource PrimaryBrush}" StrokeThickness="{Binding BorderThickness}" >
                                                <Rectangle.Fill>
                                                    <SolidColorBrush Color="{Binding OnDemandColor}"  />
                                                </Rectangle.Fill>
                                                <Rectangle.Style>
                                                    <Style TargetType="{x:Type Rectangle}">

                                                        <Style.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Opacity"  Value="0.5"/>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Rectangle.Style>
                                                <i:Interaction.Triggers>
                                                    <i:EventTrigger EventName="MouseEnter" >
                                                        <i:InvokeCommandAction Command="{Binding DataContext.SetSpotVIDCommand,RelativeSource={RelativeSource AncestorType={x:Type local:VIDEditWindow}}}" CommandParameter="{Binding .}" />
                                                    </i:EventTrigger>
                                                </i:Interaction.Triggers>

                                            </Rectangle>
                                        </Viewbox>

                                        <Viewbox Margin="0">
                                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <TextBlock Margin="1" Padding="1"  HorizontalAlignment="Center" VerticalAlignment="Center"  Text="{Binding VID}"  IsHitTestVisible="False"/>
                                            </Grid>

                                        </Viewbox>



                                    </Grid>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
            
              
                </Viewbox>
         
           
        </Grid>
          

        <Grid Margin="10,10,10,10" Grid.ColumnSpan="2" Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <Path   Fill="{DynamicResource PrimaryBrush}" Width="20" Height="20" Margin="10,10" Data="{StaticResource colorchanged}" Stretch="Uniform" />
            <TextBlock Margin="5" TextWrapping="Wrap" HorizontalAlignment="Left" Style="{DynamicResource TextBlockDefaultPrimary}" Grid.Column="1" Text="Nhấn Ctrl hoặc chuột trái để vẽ vào 1 ô bất kỳ. Nhấn Shift rồi trỏ vào 1 ô bất kỳ để xóa. Để đặt lại về ban đầu, chọn Reset."/>
            <Button Background="Transparent" Padding="0" BorderBrush="Transparent" Grid.Column="2" Margin="0" HorizontalAlignment="Left">
                <TextBlock  TextWrapping="Wrap"  Style="{DynamicResource TextBlockDefaultInfo}"  Text="Tìm hiểu thêm"/>
            </Button>

        </Grid>


    </Grid>
</hc:Window>